--- File: __manifest__.py ---
{
    'name': 'Facilities Management',
    'version': '2.1.0',
    'category': 'Operations/Maintenance',
    'summary': 'Comprehensive Facilities and Asset Management with SLA and Resource Utilization',
    'depends': [
        'base',
        'mail',
        'hr',
        'web',
        'maintenance',
        'sale_management',
        'stock',
        'product',
        'account',
    ],
    'data': [
        # Security and sequences first
        'data/sequences.xml',
        'data/predictive_parameters.xml',
        'data/maintenance_cron.xml',
        'data/email_templates.xml',
        'security/facility_management_security.xml',
        'security/ir.model.access.csv',

        # Core entity views in dependency order
        'views/room_views.xml',
        'views/floor_views.xml',
        'views/building_views.xml',
        'views/facility_views.xml',

        # Other core views
        'views/asset_category_views.xml',
        'views/facility_asset_views.xml',

        # Maintenance features
        'views/asset_maintenance_schedule_views.xml',
        'views/asset_maintenance_calendar_views.xml',
        'views/maintenance_workorder_views.xml',
        'views/maintenance_workorder_kanban.xml',
        'views/asset_maintenance_scheduled_actions.xml',
        'views/maintenance_workorder_part_line_views.xml',
        'views/product_views.xml',
        'views/maintenance_job_plan_views.xml',
        'views/maintenance_team_views.xml',
        'views/sla_views.xml',
        'views/asset_performance_views.xml',
        'views/asset_calendar_views.xml',
        'views/assign_technician_wizard_view.xml',
        'views/maintenance_workorder_permit_views.xml',

        # Reporting and Dashboards
        'views/maintenance_report_views.xml',
        'reports/maintenance_report.xml',
        'views/asset_dashboard_views.xml',

        # UI Menus
            'views/facility_asset_menus.xml',
    ],
    'assets': {
        'web.assets_backend': [
            'facilities_management/static/src/css/facilities.css',
            'facilities_management/static/src/js/dashboard_widgets.js',
        ],
        'web.assets_frontend': [
            'facilities_management/static/src/css/portal.css',
        ],
    },
    'external_dependencies': {
        'python': ['qrcode', 'Pillow'],
    },
    'application': True,
    'installable': True,
    'auto_install': False,
    'license': 'LGPL-3',
}

--- File: facilities_management_export.txt ---


--- File: __init__.py ---
from . import models
from . import wizard

--- File: export_script.py ---
import os

def export_folder_to_text(folder_path, output_filename="facilities_management_export.txt", exclude_dirs=None):
    if exclude_dirs is None:
        # Common directories to exclude in Odoo/Python projects
        exclude_dirs = ["__pycache__", ".git", ".idea", "venv", "node_modules"]

    with open(output_filename, "w", encoding="utf-8") as outfile:
        for root, dirs, files in os.walk(folder_path):
            # Modify dirs in-place to skip excluded directories
            dirs[:] = [d for d in dirs if d not in exclude_dirs]

            for file in files:
                file_path = os.path.join(root, file)
                relative_path = os.path.relpath(file_path, folder_path)

                outfile.write(f"--- File: {relative_path} ---\n")
                try:
                    with open(file_path, "r", encoding="utf-8") as infile:
                        outfile.write(infile.read())
                    outfile.write("\n\n")  # Add a separator for readability
                except Exception as e:
                    outfile.write(f"--- Error reading {relative_path}: {e} ---\n\n")

if __name__ == "__main__":
    current_folder = os.path.dirname(os.path.abspath(__file__)) # Gets the script's directory
    export_folder_to_text(current_folder)
    print(f"Code from '{current_folder}' exported to facilities_management_export.txt")

--- File: controllers/mobile_api.py ---


--- File: controllers/__init__.py ---
from . import qr_sticker
from . import mobile_api

--- File: reports/maintenance_report.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo xmlns:width="http://www.w3.org/1999/xhtml">
    <record id="action_report_asset_maintenance" model="ir.actions.report">
        <field name="name">Asset Maintenance Report</field>
        <field name="model">facilities.asset</field>
        <field name="report_type">qweb-pdf</field>
        <field name="report_name">facilities_management.report_asset_maintenance_template</field>
        <field name="report_file">facilities_management.report_asset_maintenance_template</field>
        <field name="print_report_name">'Maintenance Report - %s' % (object.name)</field>
        <field name="binding_model_id" ref="facilities_management.model_facilities_asset"/>
        <field name="binding_type">report</field>
    </record>

    <template id="report_asset_maintenance_template">
        <t t-call="web.html_container">
            <t t-foreach="docs" t-as="o">
                <t t-call="web.external_layout">
                    <div class="page">
                        <h2>Maintenance Report for <span t-field="o.name"/></h2>
                        <div class="row mt32 mb32">
                            <div class="col-6">
                                <strong>Asset Name:</strong> <span t-field="o.name"/><br/>
                                <strong>Asset Tag:</strong> <span t-field="o.asset_tag"/><br/>
                                <strong>Serial Number:</strong> <span t-field="o.serial_number"/><br/>
                                <strong>Category:</strong> <span t-field="o.category_id.name"/><br/>
                                <strong>Barcode:</strong>
                                <span t-field="o.barcode"/>
                                <br/>
<img t-if="o.barcode"
     t-att-src="('/report/barcode/QR/%s' % o.barcode)"
     style="width:3cm; height:3cm; object-fit:contain;"/>
                            </div>
                            <div class="col-6">
                                <strong>Facility:</strong> <span t-field="o.facility_id.name"/><br/>
                                <strong>Responsible Person:</strong> <span t-field="o.responsible_id.name"/><br/>
                                <strong>Condition:</strong> <span t-field="o.condition"/><br/>
                                <strong>Location:</strong> <span t-field="o.location"/><br/>
                            </div>
                        </div>

                        <h3>Maintenance History</h3>
                        <table class="table table-sm mt-4">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Cost</th>
                                    <th>Performed By</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr t-foreach="o.maintenance_ids" t-as="maintenance">
                                    <td><span t-field="maintenance.maintenance_date"/></td>
                                    <td><span t-field="maintenance.maintenance_type"/></td>
                                    <td><span t-field="maintenance.description"/></td>
                                    <td><span t-field="maintenance.cost"/></td>
                                    <td><span t-field="maintenance.performed_by.name"/></td>
                                </tr>
                            </tbody>
                        </table>
                        <p t-if="not o.maintenance_ids">No maintenance records found for this asset.</p>
                    </div>
                </t>
            </t>
        </t>
    </template>
</odoo>

--- File: reports/maintenance_analysis.py ---
# Python
from odoo import models, api

class MaintenanceReport(models.AbstractModel):
    _name = 'report.facilities_management.report_asset_maintenance_template'

    @api.model
    def _get_report_values(self, docids, data=None):
        assets = self.env['facilities.asset'].browse(docids)
        return {
            'docs': assets,
        }

--- File: reports/__init__.py ---
from . import maintenance_analysis

--- File: static/src/js/dashboard_widgets.js ---
/** @odoo-module **/

import { Component } from "@odoo/owl";
import { registry } from "@web/core/registry";

// Basic dashboard functionality
export class FacilitiesDashboard extends Component {
    static template = "facilities_management.Dashboard";

    setup() {
        console.log("Facilities Dashboard initialized");
    }
}

// Register the component
registry.category("actions").add("facilities_dashboard", FacilitiesDashboard);

// Basic utility functions
window.facilitiesUtils = {
    formatCurrency: function(amount, currency = 'USD') {
        return new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency
        }).format(amount);
    },

    formatDate: function(date) {
        return new Date(date).toLocaleDateString();
    },

    getSLAStatusClass: function(status) {
        const statusClasses = {
            'on_time': 'o_sla_on_time',
            'warning': 'o_sla_warning',
            'critical': 'o_sla_critical',
            'breached': 'o_sla_breached'
        };
        return statusClasses[status] || 'o_sla_on_time';
    }
};

console.log("Facilities Management JavaScript loaded");

--- File: static/src/css/portal.css ---
/* Portal/Frontend Styles for Facilities Management */

.facilities_portal_dashboard {
    padding: 2rem;
}

.facilities_portal_card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1.5rem;
    margin-bottom: 1.5rem;
}

.facilities_portal_asset_list {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
}

.facilities_portal_asset_card {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    transition: transform 0.2s ease;
}

.facilities_portal_asset_card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
}

--- File: static/src/css/facilities.css ---
/* Facilities Management Styles */

/* Dashboard Cards */
.o_facilities_dashboard {
    padding: 16px;
}

.o_facilities_card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    margin-bottom: 16px;
    padding: 16px;
}

.o_facilities_card h4 {
    margin-top: 0;
    color: #495057;
}

/* Asset Status Indicators */
.o_asset_status_active {
    color: #28a745;
}

.o_asset_status_maintenance {
    color: #ffc107;
}

.o_asset_status_disposed {
    color: #dc3545;
}

/* SLA Status Badges */
.badge.o_sla_on_time {
    background-color: #28a745;
    color: white;
}

.badge.o_sla_warning {
    background-color: #ffc107;
    color: #212529;
}

.badge.o_sla_critical {
    background-color: #fd7e14;
    color: white;
}

.badge.o_sla_breached {
    background-color: #dc3545;
    color: white;
}

/* Asset Dashboard KPIs */
.o_asset_kpi_card {
    text-align: center;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 10px;
    margin: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}

.o_asset_kpi_card .kpi-value {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 0.5rem;
}

.o_asset_kpi_card .kpi-label {
    font-size: 0.9rem;
    opacity: 0.9;
}

/* Kanban View Enhancements */
.o_kanban_record .o_kanban_image {
    border-radius: 50%;
}

.o_facilities_kanban_card {
    border-left: 4px solid #007bff;
}

.o_facilities_kanban_card.priority_high {
    border-left-color: #dc3545;
}

.o_facilities_kanban_card.priority_normal {
    border-left-color: #28a745;
}

.o_facilities_kanban_card.priority_low {
    border-left-color: #6c757d;
}

/* Resource Utilization Charts */
.o_resource_chart_container {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Form View Enhancements */
.o_form_sheet .o_group .o_field_widget.o_field_monetary {
    font-weight: bold;
    color: #28a745;
}

/* Asset Condition Colors */
.o_field_widget[name="condition"] .o_input {
    font-weight: bold;
}

.o_field_widget[name="condition"][data-value="new"] .o_input {
    color: #007bff;
}

.o_field_widget[name="condition"][data-value="good"] .o_input {
    color: #28a745;
}

.o_field_widget[name="condition"][data-value="fair"] .o_input {
    color: #ffc107;
}

.o_field_widget[name="condition"][data-value="poor"] .o_input {
    color: #dc3545;
}

/* QR Code Display */
.o_qr_code_container {
    text-align: center;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 8px;
    margin: 10px 0;
}

.o_qr_code_container img {
    max-width: 200px;
    border: 2px solid #dee2e6;
    border-radius: 4px;
}

/* Responsive Design */
@media (max-width: 768px) {
    .o_facilities_card {
        margin: 8px 0;
        padding: 12px;
    }

    .o_asset_kpi_card .kpi-value {
        font-size: 2rem;
    }
}

/* Print Styles */
@media print {
    .o_facilities_card {
        box-shadow: none;
        border: 1px solid #dee2e6;
    }
}

--- File: static/description/banner.txt ---


--- File: static/description/icon.txt ---


--- File: demo/facility_demo.xml ---


--- File: models/workorder_permit.py ---
from odoo import models, fields, api, _
from odoo.exceptions import UserError

class MaintenanceWorkorderPermit(models.Model):
    _name = 'maintenance.workorder.permit'
    _description = 'Work Order Permit'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string="Permit Name", required=True, tracking=True)
    permit_type = fields.Selection([
        ('electrical', 'Electrical'),
        ('mechanical', 'Mechanical'),
        ('hotwork', 'Hot Work'),
        ('confined', 'Confined Space'),
        ('general', 'General'),
    ], string="Permit Type", required=True, tracking=True)
    workorder_id = fields.Many2one('maintenance.workorder', string="Work Order", required=True, ondelete='cascade', tracking=True)
    issued_date = fields.Date(string="Issued Date", tracking=True)
    expiry_date = fields.Date(string="Expiry Date", tracking=True)
    status = fields.Selection([
        ('requested', 'Requested'),
        ('pending_manager_approval', 'Pending Manager Approval'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
        ('expired', 'Expired'),
    ], string="Status", default='requested', required=True, tracking=True)
    notes = fields.Text(string="Notes")
    requested_by_id = fields.Many2one('res.users', string="Requested By", default=lambda self: self.env.user, tracking=True)
    approved_by_id = fields.Many2one('res.users', string="Approved By", tracking=True)
    rejected_reason = fields.Text(string="Rejection Reason", tracking=True)
    attachment_ids = fields.Many2many('ir.attachment', string="Attachments")
    facility_manager_id = fields.Many2one(
        'res.users',
        string="Facility Manager",
        compute='_compute_facility_manager',
        store=False,
    )

    @api.depends('workorder_id')
    def _compute_facility_manager(self):
        for permit in self:
            manager = False
            if permit.workorder_id and permit.workorder_id.asset_id and permit.workorder_id.asset_id.facility_id:
                facility = permit.workorder_id.asset_id.facility_id
                manager = facility.manager_id
                if hasattr(manager, 'user_id') and manager.user_id:
                    permit.facility_manager_id = manager.user_id
                elif manager and manager._name == 'res.users':
                    permit.facility_manager_id = manager
                else:
                    permit.facility_manager_id = False
            else:
                permit.facility_manager_id = False

    def action_submit_for_approval(self):
        for permit in self:
            if permit.status != 'requested':
                raise UserError(_("Permit is not in 'Requested' stage!"))
            manager_user = permit.facility_manager_id
            if not manager_user:
                raise UserError(_("No facility manager found for this permit's facility."))
            permit.status = 'pending_manager_approval'
            # Create scheduled activity for the manager
            activity_type = self.env.ref('mail.mail_activity_data_todo')
            model_id = self.env['ir.model']._get_id('maintenance.workorder.permit')
            self.env['mail.activity'].create({
                'activity_type_id': activity_type.id,
                'res_id': permit.id,
                'res_model_id': model_id,
                'user_id': manager_user.id,
                'summary': _("Permit Approval Required"),
                'note': _("Please approve permit '%s' for work order '%s'.") % (permit.name, permit.workorder_id.name),
                'date_deadline': fields.Date.today(),
            })
            permit.message_post(body=_("Approval request sent to Facility Manager: %s" % manager_user.name),
                                partner_ids=[manager_user.partner_id.id])

    def action_approve(self):
        for permit in self:
            manager_user = permit.facility_manager_id
            if permit.status != 'pending_manager_approval':
                raise UserError(_("Permit is not awaiting manager approval."))
            if manager_user and self.env.user == manager_user:
                permit.status = 'approved'
                permit.approved_by_id = self.env.user.id
                permit.issued_date = fields.Date.today()  # Set issued date to approval date
                permit.message_post(body=_("Permit approved by Facility Manager."))
            else:
                raise UserError(_("Only the facility manager of this facility can approve this permit."))

    def action_reject(self):
        for permit in self:
            manager_user = permit.facility_manager_id
            if permit.status != 'pending_manager_approval':
                raise UserError(_("Permit is not awaiting manager approval."))
            if manager_user and self.env.user == manager_user:
                # Require rejection reason
                if not permit.rejected_reason:
                    raise UserError(_("Please provide a rejection reason before rejecting the permit."))
                permit.status = 'rejected'
                permit.message_post(body=_("Permit rejected by Facility Manager. Reason: %s" % permit.rejected_reason))
            else:
                raise UserError(_("Only the facility manager of this facility can reject this permit."))

--- File: models/workorder_sla.py ---
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError

class MaintenanceWorkOrderSLA(models.Model):
    _name = 'maintenance.workorder.sla'
    _description = 'Work Order SLA Configuration'
    _rec_name = 'name'
    _order = 'sequence, id'

    name = fields.Char(string='SLA Name', required=True)
    active = fields.Boolean(default=True)
    sequence = fields.Integer(string='Sequence', default=10, help="Lower sequence = higher priority for matching")

    # SLA Criteria
    priority = fields.Selection([
        ('0', 'Very Low'),
        ('1', 'Low'),
        ('2', 'Normal'),
        ('3', 'High'),
    ], string='Priority', help="Leave empty to apply to all priorities")

    facility_id = fields.Many2one('facilities.facility', string='Facility', help="Leave empty to apply to all facilities")
    location = fields.Char(string='Location', help="Leave empty to apply to all locations")
    work_order_type = fields.Selection([
        ('preventive', 'Preventive'),
        ('corrective', 'Corrective'),
        ('predictive', 'Predictive'),
        ('inspection', 'Inspection'),
    ], string='Work Order Type', help="Leave empty to apply to all types")

    response_time_hours = fields.Float(string='Response Time (Hours)', required=True, default=4.0, help="Time to acknowledge/start work")
    resolution_time_hours = fields.Float(string='Resolution Time (Hours)', required=True, default=24.0, help="Time to complete work")

    warning_threshold = fields.Float(string='Warning Threshold (%)', default=80.0, help="Send warning when SLA reaches this percentage")
    critical_threshold = fields.Float(string='Critical Threshold (%)', default=95.0, help="Send critical alert when SLA reaches this percentage")

    escalation_enabled = fields.Boolean(string='Enable Escalation', default=True)
    escalation_manager_id = fields.Many2one('hr.employee', string='Escalation Manager', domain="[('user_id', '!=', False)]")

    @api.model
    def find_matching_sla(self, workorder):
        """
        Find the most specific, active SLA configuration for a work order.
        Uses a weighted score: priority (4), facility (3), location (2), type (1).
        """
        domain = [('active', '=', True)]
        all_slas = self.search(domain, order='sequence asc')

        # Attempt to get facility and location via asset, fallback to direct field
        facility_id = getattr(workorder.asset_id, 'facility_id', None)
        if facility_id:
            facility_id = facility_id.id
        else:
            facility_id = getattr(workorder, 'facility_id', False)
            facility_id = facility_id.id if facility_id else False

        location = getattr(workorder.asset_id, 'location', None) or getattr(workorder, 'location', None)

        best_sla = None
        best_score = -1

        for sla in all_slas:
            score = 0
            matches = True

            # Priority
            if sla.priority and sla.priority != workorder.priority:
                matches = False
            elif sla.priority and sla.priority == workorder.priority:
                score += 4

            # Facility
            if sla.facility_id and facility_id and sla.facility_id.id != facility_id:
                matches = False
            elif sla.facility_id and facility_id and sla.facility_id.id == facility_id:
                score += 3

            # Location
            sla_loc = sla.location.lower().strip() if sla.location else ""
            wo_loc = (location or "").lower().strip()
            if sla.location and wo_loc and sla_loc != wo_loc:
                matches = False
            elif sla.location and wo_loc and sla_loc == wo_loc:
                score += 2

            # WO Type
            if sla.work_order_type and sla.work_order_type != workorder.work_order_type:
                matches = False
            elif sla.work_order_type and sla.work_order_type == workorder.work_order_type:
                score += 1

            if matches and score > best_score:
                best_score = score
                best_sla = sla

        return best_sla

    @api.constrains('warning_threshold', 'critical_threshold')
    def _check_thresholds(self):
        for record in self:
            if record.warning_threshold >= record.critical_threshold:
                raise ValidationError(_("Warning threshold must be less than critical threshold"))
            if record.warning_threshold <= 0 or record.critical_threshold <= 0:
                raise ValidationError(_("Thresholds must be positive values"))
            if record.warning_threshold > 100 or record.critical_threshold > 100:
                raise ValidationError(_("Thresholds cannot exceed 100%"))

    @api.constrains('response_time_hours', 'resolution_time_hours')
    def _check_time_hours(self):
        for record in self:
            if record.response_time_hours <= 0 or record.resolution_time_hours <= 0:
                raise ValidationError(_("Time hours must be positive values"))
            if record.response_time_hours >= record.resolution_time_hours:
                raise ValidationError(_("Response time must be less than resolution time"))

--- File: models/maintenance_workorder_part_line.py ---
# -*- coding: utf-8 -*-
from odoo import fields, models, api, _
from odoo.exceptions import ValidationError

class MaintenanceWorkOrderPartLine(models.Model):
    _name = 'maintenance.workorder.part_line'
    _description = 'Maintenance Work Order Part Line'

    workorder_id = fields.Many2one('maintenance.workorder', string='Work Order', required=True, ondelete='cascade')
    product_id = fields.Many2one(
        'product.product',
        string='Product',
        required=True,
        domain=[('type', 'in', ['product', 'consu'])],
        context={'default_type': 'product'}
    )
    quantity = fields.Float(string='Quantity', required=True, default=1.0)
    uom_id = fields.Many2one('uom.uom', string='Unit of Measure', related='product_id.uom_id', readonly=True)
    notes = fields.Char(string='Notes')

    # NEW FIELD TO SHOW IN-HAND STOCK
    product_qty_in_hand = fields.Float(
        string='Qty On Hand',
        related='product_id.free_qty', # Use free_qty for unreserved quantity
        readonly=True,
        help="Quantity of this product available in stock (unreserved)."
    )


    @api.constrains('quantity')
    def _check_positive_quantity(self):
        for record in self:
            if record.quantity <= 0:
                raise ValidationError(_('Quantity must be positive for parts used.'))

    @api.constrains('workorder_id')
    def _check_workorder_status_for_parts(self):
        for record in self:
            if record.workorder_id and record.workorder_id.status != 'in_progress':
                raise ValidationError(_(
                    "Parts can only be added or modified for a Work Order that is 'In Progress'. "
                    "Current status of Work Order '%s' is '%s'."
                ) % (record.workorder_id.name, record.workorder_id.status.replace('_', ' ').title()))

    @api.constrains('product_id', 'quantity')
    def _check_available_quantity(self):
        for record in self:
            if record.product_id and record.product_id.type == 'product' and record.quantity > 0:
                # Using free_qty for the constraint as well, for consistency with the new displayed field
                if record.quantity > record.product_id.free_qty:
                    raise ValidationError(_(
                        "Not enough quantity available for product '%s'.\n"
                        "Requested: %s %s, Available (On Hand): %s %s."
                    ) % (
                        record.product_id.display_name,
                        record.quantity, record.uom_id.name,
                        record.product_id.free_qty, record.uom_id.name
                    ))

--- File: models/maintenance_job_plan_section.py ---
from odoo import models, fields

class MaintenanceJobPlanSection(models.Model):
    _name = 'maintenance.job.plan.section'
    _description = 'Maintenance Job Plan Section'
    _order = 'sequence, id'

    name = fields.Char(
        string='Section Name', required=True, translate=True,
        help="Name of the section (e.g., 'Safety & Documentation')."
    )
    sequence = fields.Integer(
        string='Sequence', default=10,
        help="Order in which the sections appear."
    )
    job_plan_id = fields.Many2one(
        'maintenance.job.plan',
        string='Job Plan',
        required=True,
        ondelete='cascade',
        help="The parent job plan for this section."
    )
    task_ids = fields.One2many(
        'maintenance.job.plan.task', 'section_id',
        string='Tasks', copy=True
    )

--- File: models/room.py ---
# models/room.py
from odoo import models, fields, api

class FacilityRoom(models.Model):
    _name = 'facilities.room'
    _description = 'Facility Room'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string='Room Name/Number', required=True)
    code = fields.Char(string='Room Code', required=True, copy=False, readonly=True, default='New')
    floor_id = fields.Many2one('facilities.floor', string='Floor', required=True, ondelete='restrict', help="The floor this room is located on.")
    building_id = fields.Many2one('facilities.building', related='floor_id.building_id', string='Building', store=True, readonly=True, help="The building this room indirectly belongs to.")
    facility_id = fields.Many2one('facilities.facility', related='floor_id.building_id.facility_id', string='Facility', store=True, readonly=True, help="The facility this room indirectly belongs to.")
    manager_id = fields.Many2one('hr.employee', string='Room Manager')
    active = fields.Boolean(string='Active', default=True)

    # Room Specific Fields
    room_type = fields.Selection([
        ('office', 'Office'),
        ('meeting_room', 'Meeting Room'),
        ('restroom', 'Restroom'),
        ('kitchen', 'Kitchen'),
        ('storage', 'Storage'),
        ('utility', 'Utility Room'),
        ('classroom', 'Classroom'),
        ('laboratory', 'Laboratory'),
        ('other', 'Other'),
    ], string='Room Type', default='office')
    capacity = fields.Integer(string='Capacity', help="Maximum occupancy of the room.")
    area_sqm = fields.Float(string='Area (sqm)', digits=(10, 2))
    usage = fields.Text(string='Current Usage/Purpose')
    notes = fields.Text(string='Notes')

    # Many2many example if rooms have specific equipment categories
    # equipment_category_ids = fields.Many2many('maintenance.equipment.category', string='Equipment Categories')

    @api.model
    def create(self, vals):
        if vals.get('code', 'New') == 'New':
            vals['code'] = self.env['ir.sequence'].next_by_code('facilities.room') or 'New'
        result = super(FacilityRoom, self).create(vals)
        return result

    @api.constrains('floor_id')
    def _check_floor_id(self):
        for rec in self:
            if not rec.floor_id:
                raise fields.ValidationError("A room must be linked to a Floor.")

--- File: models/maintenance_workorder_section.py ---
from odoo import models, fields

class MaintenanceWorkorderSection(models.Model):
    _name = 'maintenance.workorder.section'
    _description = 'Work Order Section'
    _order = 'sequence, id'

    name = fields.Char(string='Section Name', required=True, readonly=True)
    sequence = fields.Integer(string='Sequence', default=10, readonly=True)
    workorder_id = fields.Many2one('maintenance.workorder', string='Work Order', required=True, ondelete='cascade')
    task_ids = fields.One2many('maintenance.workorder.task', 'section_id', string='Tasks')

--- File: models/maintenance_workorder_task.py ---
from odoo import fields, models, api, _
from odoo.exceptions import ValidationError, UserError

class MaintenanceWorkorderTask(models.Model):
    _name = 'maintenance.workorder.task'
    _description = 'Maintenance Work Order Task'
    _order = 'section_id, sequence, id'

    workorder_id = fields.Many2one('maintenance.workorder', string='Work Order', required=True, ondelete='cascade')
    section_id = fields.Many2one('maintenance.workorder.section', string='Section', ondelete='cascade')
    name = fields.Char(string='Task Description', required=True, readonly=True)
    sequence = fields.Integer(string='Sequence', default=10, readonly=True)
    is_done = fields.Boolean(string='Completed', default=False)
    description = fields.Text(string='Instructions', readonly=True)
    notes = fields.Text(string='Technician Notes', help="Notes added by the technician during execution.")
    is_checklist_item = fields.Boolean(string='Checklist Item', default=True, readonly=True)
    before_image = fields.Binary(string="Before Image", attachment=True, help="Image of the asset/area before task execution.")
    before_image_filename = fields.Char(string="Before Image Filename")
    after_image = fields.Binary(string="After Image", attachment=True, help="Image of the asset/area after task execution.")
    after_image_filename = fields.Char(string="After Image Filename")
    duration = fields.Float(string='Estimated Duration (hours)', readonly=True)
    tools_materials = fields.Text(string='Tools/Materials Required', readonly=True)
    responsible_id = fields.Many2one('hr.employee', string='Responsible Personnel (Role)', readonly=True)
    product_id = fields.Many2one('product.product', string='Required Part', readonly=True)
    quantity = fields.Float(string='Quantity', default=1.0, readonly=True)
    uom_id = fields.Many2one('uom.uom', string='Unit of Measure', readonly=True)
    frequency_type = fields.Selection(
        [
            ('daily', 'Daily'),
            ('weekly', 'Weekly'),
            ('monthly', 'Monthly'),
            ('yearly', 'Yearly'),
        ],
        string='Frequency Type',
        help="How often this task should be performed.",
        readonly=True,
    )

    @api.constrains('is_done')
    def _check_workorder_status_for_task_done(self):
        for rec in self:
            if rec.is_done and rec.workorder_id.status != 'in_progress':
                raise ValidationError(_("Tasks can only be marked as completed when the Work Order is 'In Progress'."))

    @api.model
    def create(self, vals):
        workorder = self.env['maintenance.workorder'].browse(vals.get('workorder_id'))
        if workorder and workorder.status != 'draft':
            raise UserError(_("You cannot add tasks to a work order that is not in draft."))
        return super().create(vals)

    def unlink(self):
        for rec in self:
            if rec.workorder_id.status != 'draft':
                raise UserError(_("You cannot remove tasks from a work order that is not in draft."))
        return super().unlink()

--- File: models/asset.py ---
from odoo import models, fields, api
from odoo.exceptions import ValidationError
import base64
import io
from datetime import date, datetime, timedelta

try:
    import qrcode
except ImportError:
    qrcode = None


class FacilityAsset(models.Model):
    _name = 'facilities.asset'
    _description = 'Facility Asset'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'name, asset_code'

    # Basic Information
    name = fields.Char('Asset Name', required=True, tracking=True)
    asset_tag = fields.Char(string="Asset Tag", tracking=True)
    serial_number = fields.Char(string="Serial Number", tracking=True)
    facility_id = fields.Many2one('facilities.facility', string='Project', required=True, tracking=True)
    asset_code = fields.Char('Asset Code', size=20, tracking=True, copy=False)

    # State Management
    state = fields.Selection([
        ('draft', 'Draft'),
        ('active', 'Active'),
        ('maintenance', 'Under Maintenance'),
        ('disposed', 'Disposed'),
    ], string='State', default='draft', tracking=True, required=True)

    # State transition buttons
    def action_activate(self):
        for asset in self:
            asset.state = 'active'

    def action_set_maintenance(self):
        for asset in self:
            asset.state = 'maintenance'

    def action_set_active(self):
        for asset in self:
            asset.state = 'active'

    def action_dispose(self):
        for asset in self:
            asset.state = 'disposed'

    # Relationships
    maintenance_ids = fields.One2many('asset.maintenance.schedule', 'asset_id', string='Maintenance Schedules')
    depreciation_ids = fields.One2many('facilities.asset.depreciation', 'asset_id', string='Depreciation Records')
    attachment_ids = fields.Many2many(
        'ir.attachment', string='Documents',
        domain="[('res_model','=','facilities.asset')]"
    )
    category_id = fields.Many2one('facilities.asset.category', string='Category', tracking=True)

    # Dates
    purchase_date = fields.Date('Purchase Date', tracking=True)
    installation_date = fields.Date(string='Installation Date', tracking=True)
    warranty_expiration_date = fields.Date('Warranty Expiration Date', tracking=True)

    # Physical Properties
    condition = fields.Selection(
        [
            ('new', 'New'),
            ('good', 'Good'),
            ('fair', 'Fair'),
            ('poor', 'Poor'),
        ],
        default='good',
        string='Condition',
        tracking=True
    )
    # location = fields.Char('Location', tracking=True)  # REMOVED

    # Location Hierarchy Fields
    room_id = fields.Many2one(
        'facilities.room', string='Room',
        tracking=True
    )
    building_id = fields.Many2one(
        'facilities.building', string='Building',
        compute='_compute_building_floor',
        store=True,
        readonly=False # allow override if needed
    )
    floor_id = fields.Many2one(
        'facilities.floor', string='Floor',
        compute='_compute_building_floor',
        store=True,
        readonly=False # allow override if needed
    )

    @api.depends('room_id')
    def _compute_building_floor(self):
        for asset in self:
            asset.building_id = asset.room_id.building_id if asset.room_id and asset.room_id.building_id else False
            asset.floor_id = asset.room_id.floor_id if asset.room_id and asset.room_id.floor_id else False

    # People & Organization
    responsible_id = fields.Many2one('res.users', string='Responsible Person', tracking=True)
    department_id = fields.Many2one('hr.department', string='Department', tracking=True)
    manufacturer_id = fields.Many2one('res.partner', string='Manufacturer', tracking=True)
    service_provider_id = fields.Many2one('res.partner', string='Service Provider', tracking=True)

    # Financial
    purchase_value = fields.Monetary(string='Purchase Value', currency_field='currency_id', tracking=True)
    current_value = fields.Monetary(string='Current Value', currency_field='currency_id', tracking=True)
    currency_id = fields.Many2one(
        'res.currency',
        string='Currency',
        default=lambda self: self.env.company.currency_id
    )

    # Technical Details
    model_number = fields.Char(string='Model Number', tracking=True)
    expected_lifespan = fields.Integer(string='Expected Lifespan (Years)', tracking=True)

    # Media & Documentation
    image_1920 = fields.Image("Image")
    notes = fields.Text('Notes')
    active = fields.Boolean('Active', default=True)

    # Barcode System
    barcode = fields.Char('Barcode', copy=False, index=True, tracking=True)
    barcode_image = fields.Image(
        "QR Code Image",
        compute='_compute_barcode_image',
        store=True,
        attachment=True,
        max_width=256,
        max_height=256
    )

    # COMPUTED FIELDS
    warranty_status = fields.Selection(
        [
            ('valid', 'Valid'),
            ('expired', 'Expired'),
            ('none', 'No Warranty')
        ],
        string='Warranty Status',
        compute='_compute_warranty_status',
        store=True,
        tracking=True
    )

    maintenance_due = fields.Boolean(
        string='Maintenance Due',
        compute='_compute_maintenance_due',
        store=True
    )

    # New field for dashboard compatibility
    is_enterprise = fields.Boolean(
        string="Enterprise Mode",
        compute='_compute_is_enterprise',
        help="Technical field to check if enterprise features are available"
    )

    @api.depends('warranty_expiration_date')
    def _compute_warranty_status(self):
        today = fields.Date.today()
        for asset in self:
            if not asset.warranty_expiration_date:
                asset.warranty_status = 'none'
            elif asset.warranty_expiration_date >= today:
                asset.warranty_status = 'valid'
            else:
                asset.warranty_status = 'expired'

    @api.depends('maintenance_ids.next_maintenance_date')
    def _compute_maintenance_due(self):
        today = fields.Date.today()
        for asset in self:
            due_maintenances = asset.maintenance_ids.filtered(
                lambda m: m.active and m.next_maintenance_date and m.next_maintenance_date <= today
            )
            asset.maintenance_due = bool(due_maintenances)

    def _compute_is_enterprise(self):
        """Check if web_enterprise module is installed"""
        enterprise_installed = self.env['ir.module.module'].search_count([
            ('name', '=', 'web_enterprise'),
            ('state', '=', 'installed')
        ])
        for asset in self:
            asset.is_enterprise = enterprise_installed

    @api.depends('barcode')
    def _compute_barcode_image(self):
        for asset in self:
            if asset.barcode and qrcode:
                try:
                    qr = qrcode.QRCode(version=1, box_size=4, border=1)
                    qr.add_data(asset.barcode)
                    qr.make(fit=True)
                    img = qr.make_image()

                    # Convert to base64
                    buffered = io.BytesIO()
                    img.save(buffered, format="PNG")
                    img_str = base64.b64encode(buffered.getvalue())
                    asset.barcode_image = img_str
                except Exception:
                    asset.barcode_image = False
            else:
                asset.barcode_image = False

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if not vals.get('asset_code'):
                vals['asset_code'] = self.env['ir.sequence'].next_by_code('facilities.asset') or 'AS0000'
            if not vals.get('barcode'):
                vals['barcode'] = self.env['ir.sequence'].next_by_code('facilities.asset.barcode') or 'AS0000'
        return super().create(vals_list)

    def name_get(self):
        return [(record.id, f"{record.name} [{record.asset_code}]") for record in self]

    def action_open_dashboard(self):
        """Open appropriate dashboard view based on availability of enterprise"""
        self.ensure_one()
        if self.is_enterprise:
            return {
                'type': 'ir.actions.act_window',
                'name': 'Asset Dashboard (Enterprise)',
                'res_model': 'facilities.asset',
                'view_mode': 'dashboard',
                'views': [(False, 'dashboard')],
                'target': 'current',
                'context': dict(self.env.context),
            }
        else:
            return {
                'type': 'ir.actions.act_window',
                'name': 'Asset Dashboard (Community)',
                'res_model': 'facilities.asset',
                'view_mode': 'kanban,graph,pivot',
                'views': [(False, 'kanban'), (False, 'graph'), (False, 'pivot')],
                'target': 'current',
                'context': dict(self.env.context),
            }

--- File: models/workorder_type.py ---
# models/workorder_type.py

from odoo import models, fields

class WorkorderType(models.Model):
    _name = 'workorder.type'
    _description = 'Type of Maintenance Work Order'
    _order = 'name'

    name = fields.Char(string='Type Name', required=True, help="A descriptive name for the work order type (e.g., 'Routine Inspection', 'Emergency Repair').")
    description = fields.Text(string='Description', help="Detailed description of this work order type.")

    _sql_constraints = [
        ('name_uniq', 'unique (name)', 'The work order type name must be unique!'),
    ]

--- File: models/resource_utilization.py ---
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError


class MaintenanceResourceUtilization(models.Model):
    _name = 'maintenance.resource.utilization'
    _description = 'Resource Utilization Tracking'
    _order = 'start_time desc'

    workorder_id = fields.Many2one('maintenance.workorder', string='Work Order',
                                   required=True, ondelete='cascade')
    employee_id = fields.Many2one('hr.employee', string='Employee', required=True)
    start_time = fields.Datetime(string='Start Time', required=True, default=fields.Datetime.now)
    end_time = fields.Datetime(string='End Time')
    hours_logged = fields.Float(string='Hours Logged', compute='_compute_hours_logged', store=True)

    utilization_type = fields.Selection([
        ('work', 'Active Work'),
        ('travel', 'Travel Time'),
        ('wait', 'Waiting'),
        ('break', 'Break'),
    ], string='Utilization Type', default='work', required=True)

    notes = fields.Text(string='Notes')
    hourly_rate = fields.Float(string='Hourly Rate', related='employee_id.hourly_cost', readonly=True)
    total_cost = fields.Float(string='Total Cost', compute='_compute_total_cost', store=True)

    # Status tracking
    is_active = fields.Boolean(string='Is Active', compute='_compute_is_active', store=True)

    @api.depends('start_time', 'end_time')
    def _compute_hours_logged(self):
        for record in self:
            if record.start_time and record.end_time:
                delta = record.end_time - record.start_time
                record.hours_logged = delta.total_seconds() / 3600.0
            else:
                record.hours_logged = 0.0

    @api.depends('hours_logged', 'hourly_rate')
    def _compute_total_cost(self):
        for record in self:
            record.total_cost = record.hours_logged * (record.hourly_rate or 0.0)

    @api.depends('end_time')
    def _compute_is_active(self):
        for record in self:
            record.is_active = not bool(record.end_time)

    @api.constrains('start_time', 'end_time')
    def _check_time_validity(self):
        for record in self:
            if record.end_time and record.start_time and record.end_time < record.start_time:
                raise ValidationError(_("End time cannot be before start time"))

    def action_stop_time_tracking(self):
        """Stop time tracking for this resource utilization entry"""
        self.ensure_one()
        if not self.end_time:
            self.end_time = fields.Datetime.now()
        return True

    def name_get(self):
        result = []
        for record in self:
            name = f"{record.employee_id.name} - {record.workorder_id.name} ({record.utilization_type})"
            result.append((record.id, name))
        return result

--- File: models/asset_maintenance_schedule.py ---
# models/asset_maintenance_schedule.py
from odoo import models, fields, api, _
from odoo.exceptions import UserError
from dateutil.relativedelta import relativedelta

class AssetMaintenanceSchedule(models.Model):
    _name = 'asset.maintenance.schedule'
    _description = 'Asset Maintenance Schedule'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string='Schedule Name', required=True, tracking=True)
    asset_id = fields.Many2one('facilities.asset', string='Asset', required=True, tracking=True, ondelete='restrict')
    maintenance_type = fields.Selection([
        ('preventive', 'Preventive'),
        ('corrective', 'Corrective'),
        ('predictive', 'Predictive'),
        ('inspection', 'Inspection'),
    ], string='Maintenance Type', required=True, default='preventive', tracking=True)

    interval_number = fields.Integer(string='Repeat Every', default=1, required=True, tracking=True)
    interval_type = fields.Selection([
        ('daily', 'Day(s)'),
        ('weekly', 'Week(s)'),
        ('monthly', 'Month(s)'),
        ('quarterly', 'Quarter(s)'),
        ('yearly', 'Year(s)'),
    ], string='Recurrence', default='monthly', required=True, tracking=True)

    last_maintenance_date = fields.Date(string='Last Maintenance Date', tracking=True)
    next_maintenance_date = fields.Date(string='Next Scheduled Date', compute='_compute_next_maintenance_date', store=True, tracking=True, readonly=False)
    notes = fields.Text(string='Notes')

    active = fields.Boolean(string='Active', default=True, tracking=True)

    status = fields.Selection([
        ('draft', 'Draft'),
        ('planned', 'Planned'),
        ('in_progress', 'In Progress'),
        ('done', 'Done'),
        ('cancelled', 'Cancelled')
    ], string='Status', default='planned', tracking=True)

    job_plan_id = fields.Many2one('maintenance.job.plan', string='Job Plan',
                                  help="Select a job plan to associate with this maintenance schedule. "
                                       "Tasks from this plan will be copied to generated work orders.")

    workorder_ids = fields.One2many('maintenance.workorder', 'schedule_id', string='Generated Work Orders')
    workorder_count = fields.Integer(compute='_compute_workorder_count', string='Work Orders')

    _sql_constraints = [
        ('asset_type_unique_per_asset', 'unique(asset_id, maintenance_type, active)', 'A schedule of this type already exists for this active asset!'),
    ]

    @api.depends('last_maintenance_date', 'interval_number', 'interval_type')
    def _compute_next_maintenance_date(self):
        for rec in self:
            if rec.last_maintenance_date and rec.interval_number > 0:
                current_date = rec.last_maintenance_date
                if rec.interval_type == 'daily':
                    rec.next_maintenance_date = current_date + relativedelta(days=rec.interval_number)
                elif rec.interval_type == 'weekly':
                    rec.next_maintenance_date = current_date + relativedelta(weeks=rec.interval_number)
                elif rec.interval_type == 'monthly':
                    rec.next_maintenance_date = current_date + relativedelta(months=rec.interval_number)
                elif rec.interval_type == 'quarterly':
                    rec.next_maintenance_date = current_date + relativedelta(months=rec.interval_number * 3)
                elif rec.interval_type == 'yearly':
                    rec.next_maintenance_date = current_date + relativedelta(years=rec.interval_number)
                else:
                    rec.next_maintenance_date = False
            else:
                rec.next_maintenance_date = False

    @api.depends('workorder_ids')
    def _compute_workorder_count(self):
        for rec in self:
            rec.workorder_count = len(rec.workorder_ids)

    def action_generate_work_order(self):
        """Generates a work order for the maintenance schedule."""
        for schedule in self:
            if not schedule.active:
                raise UserError(_("Cannot generate a work order for an inactive schedule."))
            if not schedule.next_maintenance_date:
                raise UserError(_("Next maintenance date is not set for the schedule: %s.") % schedule.name)

            # Create the work order
            work_order_vals = {
                'name': _('New'),
                'asset_id': schedule.asset_id.id,
                'schedule_id': schedule.id,
                'work_order_type': schedule.maintenance_type,
                'start_date': schedule.next_maintenance_date,
                'job_plan_id': schedule.job_plan_id.id if schedule.job_plan_id else False,
            }
            work_order = self.env['maintenance.workorder'].create(work_order_vals)

            # Update the last maintenance date and compute the next maintenance date
            schedule.last_maintenance_date = schedule.next_maintenance_date
            schedule._compute_next_maintenance_date()

            # Log the creation
            schedule.message_post(body=_("Work order %s has been generated.") % work_order.name)

--- File: models/__init__.py ---
# -*- coding: utf-8 -*-

import logging
from odoo import api, SUPERUSER_ID

_logger = logging.getLogger(__name__)

# Standard way to import models in Odoo modules
# Ensure all your model files are listed here in a logical dependency order.

# 1. Base/Configuration/Lookup Models (Least dependencies within module)
from . import hr_employee
from . import product
from . import maintenance_team
# REMOVED: from . import maintenance_job_plan_task (as it's defined in maintenance_job_plan.py)
from . import maintenance_job_plan      # <--- This import is correct and will load both classes

# 2. Core Infrastructure & Assets (Hierarchical, depends on basic Odoo models)
from . import building
from . import floor
from . import room
from . import facility
from . import asset_category
from . import asset
from . import workorder_permit

# 3. Asset Performance (depends on asset)
from . import asset_performance

# 4. Transactional Models (Depend on many of the above)
from . import maintenance_workorder
from . import maintenance_workorder_assignment
from . import maintenance_workorder_part_line
from . import maintenance_workorder_task
from . import maintenance_job_plan_section
from . import maintenance_job_plan_task
from . import maintenance_job_plan
from . import maintenance_workorder_section
from . import stock_picking

# 5. Scheduled/Predictive Maintenance (Often depend on assets and work orders)
from . import asset_maintenance_schedule
from . import predictive_maintenance
from . import asset_depreciation

# NEW IMPORTS FOR SLA AND RESOURCE UTILIZATION
from . import hr_employee_extension
from . import workorder_sla
from . import resource_utilization
from . import sla_analytics
from . import workorder_sla_integration


# The pre_init_hook can remain if its logic is still desired
def pre_init_hook(cr):
    """Ensure clean slate"""
    env = api.Environment(cr, SUPERUSER_ID, {})
    _logger.info("Running pre_init_hook for facilities_management...")
    try:
        cr.execute("""
            DELETE FROM ir_model WHERE model = 'facilities.facility';
            DELETE FROM ir_model_data WHERE model = 'ir.model' AND name LIKE 'model_facilities%';
        """)
        _logger.info("Cleaned up old facilities.facility model entries (if any).")
    except Exception as e:
        _logger.warning(f"Failed to run pre_init_hook cleanup: {e}")

--- File: models/workorder_sla_integration.py ---
from odoo import models, fields, api, _
from datetime import datetime, timedelta
from odoo.exceptions import UserError


class MaintenanceWorkOrder(models.Model):
    _inherit = 'maintenance.workorder'

    # SLA Fields
    sla_id = fields.Many2one('maintenance.workorder.sla', string='Applied SLA', readonly=True)
    sla_response_deadline = fields.Datetime(string='Response Deadline', readonly=True)
    sla_resolution_deadline = fields.Datetime(string='Resolution Deadline', readonly=True)
    sla_response_status = fields.Selection([
        ('on_time', 'On Time'),
        ('warning', 'Warning'),
        ('critical', 'Critical'),
        ('breached', 'Breached')
    ], string='Response SLA Status', compute='_compute_sla_status', store=True)
    sla_resolution_status = fields.Selection([
        ('on_time', 'On Time'),
        ('warning', 'Warning'),
        ('critical', 'Critical'),
        ('breached', 'Breached')
    ], string='Resolution SLA Status', compute='_compute_sla_status', store=True)

    # Resource Utilization
    resource_utilization_ids = fields.One2many('maintenance.resource.utilization', 'workorder_id',
                                               string='Resource Utilization')
    total_resource_hours = fields.Float(string='Total Resource Hours',
                                        compute='_compute_resource_metrics', store=True)
    total_resource_cost = fields.Float(string='Total Resource Cost',
                                       compute='_compute_resource_metrics', store=True)
    resource_efficiency = fields.Float(string='Resource Efficiency (%)',
                                       compute='_compute_resource_metrics', store=True)

    # Enhanced assignment tracking
    assigned_technician_ids = fields.Many2many('hr.employee', 'workorder_technician_rel',
                                               'workorder_id', 'employee_id',
                                               string='Assigned Technicians',
                                               domain="[('is_technician', '=', True)]")

    @api.model
    def create(self, vals):
        workorder = super().create(vals)
        workorder._apply_sla()
        return workorder

    def write(self, vals):
        result = super().write(vals)
        # Reapply SLA if relevant fields change
        if any(field in vals for field in ['priority', 'asset_id', 'work_order_type']):
            for record in self:
                record._apply_sla()
        return result

    def _apply_sla(self):
        """Apply appropriate SLA to the work order"""
        try:
            sla = self.env['maintenance.workorder.sla'].find_matching_sla(self)
            if sla:
                current_time = fields.Datetime.now()
                self.write({
                    'sla_id': sla.id,
                    'sla_response_deadline': current_time + timedelta(hours=sla.response_time_hours),
                    'sla_resolution_deadline': current_time + timedelta(hours=sla.resolution_time_hours),
                })
        except Exception:
            # If SLA model doesn't exist yet, skip
            pass

    @api.depends('sla_response_deadline', 'sla_resolution_deadline', 'actual_start_date', 'actual_end_date', 'status')
    def _compute_sla_status(self):
        for record in self:
            if not record.sla_response_deadline:
                record.sla_response_status = 'on_time'
                record.sla_resolution_status = 'on_time'
                continue

            current_time = fields.Datetime.now()

            # Response SLA Status
            if record.actual_start_date:
                record.sla_response_status = 'on_time'
            else:
                time_remaining = (record.sla_response_deadline - current_time).total_seconds()
                total_time = (record.sla_response_deadline - record.create_date).total_seconds()
                percentage_used = ((total_time - time_remaining) / total_time) * 100 if total_time > 0 else 0

                if time_remaining <= 0:
                    record.sla_response_status = 'breached'
                elif percentage_used >= (record.sla_id.critical_threshold if record.sla_id else 95):
                    record.sla_response_status = 'critical'
                elif percentage_used >= (record.sla_id.warning_threshold if record.sla_id else 80):
                    record.sla_response_status = 'warning'
                else:
                    record.sla_response_status = 'on_time'

            # Resolution SLA Status
            if record.status == 'done':
                record.sla_resolution_status = 'on_time'
            else:
                time_remaining = (record.sla_resolution_deadline - current_time).total_seconds()
                total_time = (record.sla_resolution_deadline - record.create_date).total_seconds()
                percentage_used = ((total_time - time_remaining) / total_time) * 100 if total_time > 0 else 0

                if time_remaining <= 0:
                    record.sla_resolution_status = 'breached'
                elif percentage_used >= (record.sla_id.critical_threshold if record.sla_id else 95):
                    record.sla_resolution_status = 'critical'
                elif percentage_used >= (record.sla_id.warning_threshold if record.sla_id else 80):
                    record.sla_resolution_status = 'warning'
                else:
                    record.sla_resolution_status = 'on_time'

    @api.depends('resource_utilization_ids.hours_logged', 'resource_utilization_ids.total_cost')
    def _compute_resource_metrics(self):
        for record in self:
            record.total_resource_hours = sum(record.resource_utilization_ids.mapped('hours_logged'))
            record.total_resource_cost = sum(record.resource_utilization_ids.mapped('total_cost'))

            # Calculate efficiency based on estimated vs actual hours
            estimated_duration = 0
            if record.end_date and record.start_date:
                estimated_duration = (record.end_date - record.start_date).total_seconds() / 3600.0

            if estimated_duration > 0 and record.total_resource_hours > 0:
                record.resource_efficiency = (estimated_duration / record.total_resource_hours) * 100
            else:
                record.resource_efficiency = 100.0

    def action_start_progress(self):
        """Override to track SLA response time and start resource utilization"""
        result = super().action_start_progress()

        # Create initial resource utilization records for assigned technicians
        for technician in self.assigned_technician_ids:
            self.env['maintenance.resource.utilization'].create({
                'workorder_id': self.id,
                'employee_id': technician.id,
                'start_time': fields.Datetime.now(),
                'utilization_type': 'work',
                'notes': f'Started work on {self.name}',
            })
        return result

    def action_complete(self):
        """Override to finalize resource utilization"""
        # Close any open resource utilization records
        open_utilizations = self.resource_utilization_ids.filtered(lambda r: not r.end_time)
        for util in open_utilizations:
            util.end_time = fields.Datetime.now()

        return super().action_complete()

    def action_start_time_tracking(self):
        """Start time tracking for assigned technicians"""
        self.ensure_one()
        if not self.assigned_technician_ids:
            raise UserError(_("Please assign technicians before starting time tracking."))

        # Create time tracking entries for assigned technicians
        for technician in self.assigned_technician_ids:
            existing_active = self.env['maintenance.resource.utilization'].search([
                ('employee_id', '=', technician.id),
                ('workorder_id', '=', self.id),
                ('is_active', '=', True)
            ])
            if not existing_active:
                self.env['maintenance.resource.utilization'].create({
                    'workorder_id': self.id,
                    'employee_id': technician.id,
                    'start_time': fields.Datetime.now(),
                    'utilization_type': 'work',
                    'notes': f'Manual time tracking started for {self.name}',
                })

        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _('Time Tracking Started'),
                'message': f'Time tracking started for {len(self.assigned_technician_ids)} technician(s)',
                'type': 'success',
            }
        }

    def action_stop_time_tracking(self):
        """Stop time tracking for all active entries"""
        self.ensure_one()
        active_entries = self.resource_utilization_ids.filtered(lambda r: r.is_active)
        stopped_count = 0
        for entry in active_entries:
            entry.action_stop_time_tracking()
            stopped_count += 1

        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': _('Time Tracking Stopped'),
                'message': f'Stopped time tracking for {stopped_count} active entries',
                'type': 'success',
            }
        }

    def get_sla_progress(self):
        """Get SLA progress as percentage"""
        self.ensure_one()
        if not self.sla_response_deadline:
            return {'response': 0, 'resolution': 0}

        current_time = fields.Datetime.now()

        # Response progress
        total_response_time = (self.sla_response_deadline - self.create_date).total_seconds()
        elapsed_response_time = (current_time - self.create_date).total_seconds()
        response_progress = min(100,
                                (elapsed_response_time / total_response_time) * 100) if total_response_time > 0 else 0

        # Resolution progress
        total_resolution_time = (self.sla_resolution_deadline - self.create_date).total_seconds()
        elapsed_resolution_time = (current_time - self.create_date).total_seconds()
        resolution_progress = min(100, (
                    elapsed_resolution_time / total_resolution_time) * 100) if total_resolution_time > 0 else 0

        return {
            'response': response_progress,
            'resolution': resolution_progress
        }

--- File: models/maintenance_workorder_assignment.py ---
# models/maintenance_workorder_assignment.py
from odoo import models, fields

class MaintenanceWorkOrderAssignment(models.Model):
    _name = 'maintenance.workorder.assignment'
    _description = 'Maintenance Work Order Technician Assignment'
    _rec_name = 'technician_id' # Display technician name in relation

    workorder_id = fields.Many2one(
        'maintenance.workorder',
        string='Work Order',
        required=True,
        ondelete='cascade' # If work order is deleted, assignments are deleted
    )
    technician_id = fields.Many2one(
        'hr.employee',
        string="Technician",
        required=True
    )
    start_date = fields.Datetime(string="Start Date", default=fields.Datetime.now)
    end_date = fields.Datetime(string="End Date")

    _sql_constraints = [
        ('unique_technician_per_workorder_date', 'UNIQUE(workorder_id, technician_id, start_date)', 'A technician can only be assigned once to the same work order at the exact same start time. Please adjust the start date/time or add a new assignment.'),
    ]

--- File: models/asset_depreciation.py ---
from odoo import models, fields

class AssetDepreciation(models.Model):
    _name = 'facilities.asset.depreciation'
    _description = 'Asset Depreciation Record'

    asset_id = fields.Many2one('facilities.asset', string='Asset', required=True, ondelete='cascade')
    depreciation_date = fields.Date('Depreciation Date', required=True)
    value_before = fields.Float('Value Before Depreciation')
    depreciation_amount = fields.Float('Depreciation Amount')
    value_after = fields.Float('Value After Depreciation')


--- File: models/asset_performance.py ---
from odoo import models, fields, api, _
from odoo.exceptions import ValidationError
from datetime import datetime, timedelta, date
import logging

_logger = logging.getLogger(__name__)


class AssetPerformance(models.Model):
    _name = 'facilities.asset.performance'
    _description = 'Asset Performance Tracking'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'date desc, asset_id'
    _rec_name = 'display_name'

    # Basic Information
    asset_id = fields.Many2one('facilities.asset', string='Asset', required=True,
                               ondelete='cascade', index=True, tracking=True)
    date = fields.Date(string='Date', required=True, default=fields.Date.context_today,
                       tracking=True, index=True)

    # Performance Metrics (in hours)
    expected_daily_runtime = fields.Float(string='Expected Daily Runtime (Hours)',
                                          default=8.0, required=True, tracking=True,
                                          help="Expected operating hours per day for this asset")
    actual_runtime = fields.Float(string='Actual Runtime (Hours)',
                                  required=True, tracking=True,
                                  help="Actual operating hours recorded for this day")
    downtime_hours = fields.Float(string='Downtime (Hours)',
                                  tracking=True, default=0.0,
                                  help="Hours the asset was down/not operational")

    # Computed Performance Indicators
    runtime_percentage = fields.Float(string='Runtime Efficiency (%)',
                                      compute='_compute_performance_metrics',
                                      store=True, group_operator='avg')
    availability_percentage = fields.Float(string='Availability (%)',
                                           compute='_compute_performance_metrics',
                                           store=True, group_operator='avg')
    utilization_percentage = fields.Float(string='Utilization (%)',
                                          compute='_compute_performance_metrics',
                                          store=True, group_operator='avg')

    # Additional Information
    notes = fields.Text(string='Performance Notes')
    operator_id = fields.Many2one('res.users', string='Operator/Responsible',
                                  default=lambda self: self.env.user, tracking=True)
    shift = fields.Selection([
        ('morning', 'Morning'),
        ('afternoon', 'Afternoon'),
        ('night', 'Night'),
        ('full_day', 'Full Day')
    ], string='Shift', default='full_day', tracking=True)

    # Performance Status
    performance_status = fields.Selection([
        ('excellent', 'Excellent (≥95%)'),
        ('good', 'Good (80-94%)'),
        ('average', 'Average (60-79%)'),
        ('poor', 'Poor (<60%)')
    ], string='Performance Status', compute='_compute_performance_status',
        store=True, tracking=True)

    # Downtime Reasons
    downtime_reason_ids = fields.Many2many('asset.downtime.reason',
                                           string='Downtime Reasons')

    # Technical fields
    display_name = fields.Char(string='Display Name', compute='_compute_display_name', store=True)
    company_id = fields.Many2one('res.company', string='Company',
                                 default=lambda self: self.env.company,
                                 help="Company this performance record belongs to")

    _sql_constraints = [
        ('unique_asset_date_shift', 'unique(asset_id, date, shift)',
         'Performance record already exists for this asset, date, and shift!'),
        ('positive_expected_runtime', 'CHECK(expected_daily_runtime > 0)',
         'Expected daily runtime must be positive!'),
        ('positive_actual_runtime', 'CHECK(actual_runtime >= 0)',
         'Actual runtime cannot be negative!'),
        ('positive_downtime', 'CHECK(downtime_hours >= 0)',
         'Downtime cannot be negative!'),
    ]

    @api.depends('asset_id', 'date', 'shift')
    def _compute_display_name(self):
        for record in self:
            if record.asset_id and record.date:
                record.display_name = f"{record.asset_id.name} - {record.date} ({record.shift or 'N/A'})"
            else:
                record.display_name = "New Performance Record"

    @api.depends('expected_daily_runtime', 'actual_runtime', 'downtime_hours')
    def _compute_performance_metrics(self):
        for record in self:
            if record.expected_daily_runtime > 0:
                # Runtime Efficiency: Actual vs Expected
                record.runtime_percentage = (record.actual_runtime / record.expected_daily_runtime) * 100

                # Availability: (Expected - Downtime) / Expected
                available_time = max(0, record.expected_daily_runtime - record.downtime_hours)
                record.availability_percentage = (available_time / record.expected_daily_runtime) * 100

                # Utilization: Actual / Available Time
                if available_time > 0:
                    record.utilization_percentage = min(100, (record.actual_runtime / available_time) * 100)
                else:
                    record.utilization_percentage = 0.0
            else:
                record.runtime_percentage = 0.0
                record.availability_percentage = 0.0
                record.utilization_percentage = 0.0

    @api.depends('availability_percentage')
    def _compute_performance_status(self):
        for record in self:
            if record.availability_percentage >= 95:
                record.performance_status = 'excellent'
            elif record.availability_percentage >= 80:
                record.performance_status = 'good'
            elif record.availability_percentage >= 60:
                record.performance_status = 'average'
            else:
                record.performance_status = 'poor'

    @api.constrains('actual_runtime', 'downtime_hours', 'expected_daily_runtime')
    def _check_time_logic(self):
        for record in self:
            # Check if actual runtime + downtime doesn't exceed 24 hours unreasonably
            total_time = record.actual_runtime + record.downtime_hours
            if total_time > 24:
                raise ValidationError(_("Total runtime and downtime cannot exceed 24 hours per day."))

            # Warn if actual runtime exceeds expected significantly
            if record.actual_runtime > record.expected_daily_runtime * 1.5:
                _logger.warning(f"Asset {record.asset_id.name} actual runtime ({record.actual_runtime}h) "
                                f"significantly exceeds expected ({record.expected_daily_runtime}h) on {record.date}")

    def action_view_performance_analysis(self):
        """Open performance analysis for this asset"""
        return {
            'type': 'ir.actions.act_window',
            'name': f'Performance Analysis - {self.asset_id.name}',
            'res_model': 'facilities.asset.performance',
            'view_mode': 'graph,pivot,tree',
            'domain': [('asset_id', '=', self.asset_id.id)],
            'context': {
                'search_default_group_by_date': 1,
                'search_default_last_30_days': 1,
            }
        }


class AssetDowntimeReason(models.Model):
    _name = 'asset.downtime.reason'
    _description = 'Asset Downtime Reason'
    _order = 'sequence, name'

    name = fields.Char(string='Reason', required=True, translate=True)
    code = fields.Char(string='Code', size=10)
    description = fields.Text(string='Description')
    sequence = fields.Integer(string='Sequence', default=10)
    category = fields.Selection([
        ('mechanical', 'Mechanical Failure'),
        ('electrical', 'Electrical Issue'),
        ('maintenance', 'Scheduled Maintenance'),
        ('material', 'Material/Supply Issue'),
        ('operator', 'Operator Issue'),
        ('environmental', 'Environmental'),
        ('other', 'Other')
    ], string='Category', required=True, default='other')
    active = fields.Boolean(string='Active', default=True)
    color = fields.Integer(string='Color', default=0)

    _sql_constraints = [
        ('unique_code', 'unique(code)', 'Downtime reason code must be unique!')
    ]

--- File: models/facility.py ---
# models/facility.py
from odoo import models, fields, api
import logging

_logger = logging.getLogger(__name__)


class Facility(models.Model):
    _name = 'facilities.facility'
    _description = 'Facility Management'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    # Basic Information
    name = fields.Char(string='Facility Name', required=True, help="The official name of the facility or property.")
    code = fields.Char(string='Facility Code', required=True, copy=False, readonly=True, default='New', help="Unique identifier for the facility, often auto-generated.")
    manager_id = fields.Many2one('hr.employee', string='Facility Manager', tracking=True, help="The employee responsible for managing this facility.")
    active = fields.Boolean(string='Active', default=True, help="Set to false to archive the facility.")

    # Location Details
    address = fields.Char(string='Address', help="Street address of the facility.")
    city = fields.Char(string='City')
    state_id = fields.Many2one('res.country.state', string='State')
    zip_code = fields.Char(string='Zip Code')
    country_id = fields.Many2one('res.country', string='Country')
    latitude = fields.Float(string='Latitude', digits=(10, 7), help="Geographical latitude coordinate.")
    longitude = fields.Float(string='Longitude', digits=(10, 7), help="Geographical longitude coordinate.")
    map_link = fields.Char(string='Map Link', help="Link to a map service (e.g., Google Maps) for the facility location.")

    # Property Details
    property_type = fields.Selection([
        ('commercial', 'Commercial'),
        ('residential', 'Residential'),
        ('industrial', 'Industrial'),
        ('retail', 'Retail'),
        ('mixed_use', 'Mixed-Use'),
        ('other', 'Other'),
    ], string='Property Type', default='commercial', help="Categorization of the property.")
    area_sqm = fields.Float(string='Area (sqm)', digits=(10, 2), help="Total area of the facility in square meters.")
    number_of_floors = fields.Integer(string='Number of Floors', help="Total number of floors in the building.")
    year_built = fields.Integer(string='Year Built', help="The year the facility was constructed.")
    last_renovation_date = fields.Date(string='Last Renovation Date', help="Date of the last major renovation.")
    occupancy_status = fields.Selection([
        ('occupied', 'Occupied'),
        ('vacant', 'Vacant'),
        ('under_renovation', 'Under Renovation'),
    ], string='Occupancy Status', default='occupied', help="Current occupancy status of the facility.")
    capacity = fields.Integer(string='Capacity', help="Maximum occupancy or functional capacity of the facility.")

    # Contact & Access Information
    contact_person_id = fields.Many2one('res.partner', string='Primary Contact Person', help="Main contact person associated with this facility (e.g., owner, key tenant).")
    phone = fields.Char(string='Phone Number', help="Primary phone number for the facility.")
    email = fields.Char(string='Email Address', help="Primary email address for the facility.")
    access_instructions = fields.Text(string='Access Instructions', help="Detailed instructions for accessing the facility, e.g., gate codes, key locations.")

    # Utility & Services Information
    electricity_meter_id = fields.Char(string='Electricity Meter ID', help="Identifier for the electricity meter.")
    water_meter_id = fields.Char(string='Water Meter ID', help="Identifier for the water meter.")
    gas_meter_id = fields.Char(string='Gas Meter ID', help="Identifier for the gas meter.")
    internet_provider = fields.Char(string='Internet Provider', help="Main internet service provider.")
    security_system_type = fields.Char(string='Security System Type', help="Description of the security system installed.")

    # Compliance & Documentation
    permit_numbers = fields.Char(string='Permit Numbers', help="Relevant building permits or licenses.")
    inspection_due_date = fields.Date(string='Next Inspection Due Date', help="Date when the next regulatory inspection is due.")
    notes = fields.Text(string='Internal Notes', help="Any additional internal notes or remarks about the facility.")
    documents_ids = fields.Many2many('ir.attachment', string='Facility Documents',
                                    domain="[('res_model','=','facilities.facility')]", help="Attached documents related to the facility (e.g., blueprints, floor plans, certificates).")

    # NEW: One2many relationship to Buildings
    building_ids = fields.One2many('facilities.building', 'facility_id', string='Buildings', help="List of buildings associated with this facility.")
    building_count = fields.Integer(compute='_compute_building_count', string='Number of Buildings', store=True)

    @api.depends('building_ids')
    def _compute_building_count(self):
        for rec in self:
            rec.building_count = len(rec.building_ids)

    @api.model
    def create(self, vals):
        if vals.get('code', 'New') == 'New':
            vals['code'] = self.env['ir.sequence'].next_by_code('facilities.facility') or 'New'
        result = super(Facility, self).create(vals)
        return result

--- File: models/maintenance_job_plan_task.py ---
from odoo import models, fields

class MaintenanceJobPlanTask(models.Model):
    _name = 'maintenance.job.plan.task'
    _description = 'Maintenance Job Plan Task'
    _order = 'section_id, sequence, id'

    section_id = fields.Many2one(
        'maintenance.job.plan.section',
        string='Section',
        required=True,
        ondelete='cascade',
        help="Section to which this task belongs."
    )
    job_plan_id = fields.Many2one(
        'maintenance.job.plan',
        string='Job Plan',
        ondelete='cascade',
        related='section_id.job_plan_id',
        store=True,
        readonly=False,
        help="Job Plan to which this task ultimately belongs (auto-filled from section)."
    )
    name = fields.Char(
        string='Task Name',
        required=True,
        translate=True,
        help="Brief name of the task (e.g., 'Inspect Filters')."
    )
    sequence = fields.Integer(
        string='Sequence',
        default=10,
        help="Order in which the tasks appear within this section."
    )
    description = fields.Text(
        string='Instructions',
        help="Detailed instructions for performing this task."
    )
    is_checklist_item = fields.Boolean(
        string='Checklist Item',
        default=True,
        help="If checked, this task can be marked as completed on a work order."
    )
    duration = fields.Float(
        string='Estimated Duration (hours)',
        help="Estimated time to complete this task in hours."
    )
    tools_materials = fields.Text(
        string='Tools/Materials Required',
        help="List of tools, parts, or materials needed for this task."
    )
    responsible_id = fields.Many2one(
        'hr.employee', string='Responsible Personnel (Role)',
        help="The role or type of personnel typically responsible for this task (e.g., FM Technician, Electrician)."
    )
    product_id = fields.Many2one(
        'product.product', string='Required Part'
    )
    quantity = fields.Float(
        string='Quantity', default=1.0
    )
    uom_id = fields.Many2one(
        'uom.uom', string='Unit of Measure', related='product_id.uom_id', readonly=True
    )

    frequency_type = fields.Selection(
        [
            ('daily', 'Daily'),
            ('weekly', 'Weekly'),
            ('monthly', 'Monthly'),
            ('yearly', 'Yearly'),
        ],
        string='Frequency Type',
        help="How often this task should be performed.",
    )

--- File: models/__post_init__.py ---
# models/__post_init__.py
from odoo import api, SUPERUSER_ID, fields


def migrate(cr, version):
    env = api.Environment(cr, SUPERUSER_ID, {})

    # 1. Maintain existing technician assignment
    env['maintenance.workorder'].search([]).write({
        'technician_id': env.ref('base.user_admin').employee_id.id
    })

    # 2. Predictive Maintenance Defaults
    _setup_predictive_parameters(env)

    # 4. Migrate old schedules to new format
    _migrate_legacy_schedules(env)


def _setup_predictive_parameters(env):
    """Configure default predictive maintenance thresholds"""
    params = env['ir.config_parameter']

    params.set_param('facilities.predictive.usage_threshold', '500')  # Hours/miles
    params.set_param('facilities.predictive.time_threshold', '30')  # Days
    # Removed: params.set_param('facilities.predictive.iot_variance', '0.15')  # 15% tolerance

    # Create default algorithm mapping
    env['predictive.algorithm'].create({
        'name': 'Default Linear Model',
        'model_type': 'linear',
        'asset_type_ids': [(4, env.ref('facilities_management.model_facilities_asset').id)]
    })


def _migrate_legacy_schedules(env):
    """Convert old schedules to predictive format"""
    legacy_schedules = env['asset.maintenance.schedule'].search([
        ('predictive_algorithm', '=', False)
    ])

    legacy_schedules.write({
        'predictive_algorithm': 'time',
        'time_threshold': 30  # Default 30-day intervals
    })

--- File: models/building.py ---
# models/building.py
from odoo import models, fields, api

class FacilityBuilding(models.Model):
    _name = 'facilities.building'
    _description = 'Facility Building'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string='Building Name', required=True)
    code = fields.Char(string='Building Code', required=True, copy=False, readonly=True, default='New')
    facility_id = fields.Many2one('facilities.facility', string='Facility/Property', required=True, ondelete='restrict', help="The main facility or property this building belongs to.")
    manager_id = fields.Many2one('hr.employee', string='Building Manager')
    active = fields.Boolean(string='Active', default=True)

    # Building Specific Fields
    address = fields.Char(string='Address', help="Street address of the building if different from facility.")
    building_type = fields.Selection([
        ('office', 'Office'),
        ('residential', 'Residential'),
        ('warehouse', 'Warehouse'),
        ('retail', 'Retail'),
        ('hospital', 'Hospital'),
        ('educational', 'Educational'),
        ('other', 'Other'),
    ], string='Building Type', default='office')
    number_of_floors = fields.Integer(string='Number of Floors')
    total_area_sqm = fields.Float(string='Total Area (sqm)', digits=(10, 2))
    year_constructed = fields.Integer(string='Year Constructed')
    description = fields.Text(string='Description')
    image = fields.Image(string="Building Image", max_width=1024, max_height=1024)

    # NEW: One2many relationship to Floors
    floor_ids = fields.One2many('facilities.floor', 'building_id', string='Floors', help="List of floors within this building.")
    floor_count = fields.Integer(compute='_compute_floor_count', string='Number of Floors', store=True)

    @api.depends('floor_ids')
    def _compute_floor_count(self):
        for rec in self:
            rec.floor_count = len(rec.floor_ids)

    @api.model
    def create(self, vals):
        if vals.get('code', 'New') == 'New':
            vals['code'] = self.env['ir.sequence'].next_by_code('facilities.building') or 'New'
        result = super(FacilityBuilding, self).create(vals)
        return result

    @api.constrains('facility_id')
    def _check_facility_id(self):
        for rec in self:
            if not rec.facility_id:
                raise fields.ValidationError("A building must be linked to a Facility.")

--- File: models/maintenance_team.py ---
from odoo import fields, models, api

class MaintenanceTeam(models.Model):
    _name = 'maintenance.team'
    _description = 'Maintenance Team'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    SERVICE_TYPE_SELECTION = [
        ('maintenance', 'Maintenance'),
        ('cleaning', 'Cleaning'),
        ('security', 'Security'),
        ('esg', 'ESG Compliance'),
        ('hse', 'HSE Incident')
    ]

    name = fields.Char(string="Team Name", required=True)
    service_type = fields.Selection(
        SERVICE_TYPE_SELECTION,
        string="Service Type",
        required=True,
        default='maintenance',
        tracking=True,
        help="Department/Service this team belongs to."
    )
    leader_id = fields.Many2one(
        'hr.employee', string="Team Leader",
        domain="[('work_email', '!=', False)]",
        help="The employee responsible for this maintenance team."
    )
    member_ids = fields.Many2many(
        'hr.employee', 'maintenance_team_employee_rel',
        'team_id', 'employee_id', string="Team Members",
        domain="[('work_email', '!=', False)]",
        help="Employees who are part of this maintenance team."
    )
    request_ids = fields.One2many(
        'maintenance.request', 'maintenance_team_id', string="Maintenance Requests"
    )
    workorder_count = fields.Integer(
        string="Number of Requests", compute='_compute_workorder_count'
    )
    company_id = fields.Many2one(
        'res.company', string='Company', required=True,
        default=lambda self: self.env.company
    )

    @api.depends('request_ids')
    def _compute_workorder_count(self):
        for team in self:
            team.workorder_count = len(team.request_ids)

--- File: models/asset_category.py ---
from odoo import models, fields

class AssetCategory(models.Model):
    _name = 'facilities.asset.category'
    _description = 'Asset Category'

    name = fields.Char('Category Name', required=True)
    description = fields.Text('Description')
    active = fields.Boolean('Active', default=True)  # Add this line


--- File: models/sla_analytics.py ---
from odoo import models, fields, api, tools
from datetime import datetime, timedelta

class WorkOrderSLAAnalytics(models.Model):
    _name = 'maintenance.sla.analytics'
    _description = 'SLA Analytics and Reports'
    _auto = False

    workorder_id = fields.Many2one('maintenance.workorder', string='Work Order')
    sla_id = fields.Many2one('maintenance.workorder.sla', string='SLA')
    priority = fields.Selection([
        ('0', 'Very Low'),
        ('1', 'Low'),
        ('2', 'Normal'),
        ('3', 'High'),
    ], string='Priority')
    facility_id = fields.Many2one('facilities.facility', string='Facility')
    response_sla_met = fields.Boolean(string='Response SLA Met')
    resolution_sla_met = fields.Boolean(string='Resolution SLA Met')
    response_time_hours = fields.Float(string='Actual Response Time (Hours)')
    resolution_time_hours = fields.Float(string='Actual Resolution Time (Hours)')
    sla_response_target = fields.Float(string='Response SLA Target')
    sla_resolution_target = fields.Float(string='Resolution SLA Target')

    def init(self):
        tools.drop_view_if_exists(self.env.cr, self._table)
        self.env.cr.execute("""
            CREATE OR REPLACE VIEW %s AS (
                SELECT
                    wo.id,
                    wo.id as workorder_id,
                    wo.sla_id,
                    wo.priority,
                    a.facility_id,
                    CASE 
                        WHEN wo.actual_start_date IS NOT NULL AND wo.sla_response_deadline IS NOT NULL
                        THEN wo.actual_start_date <= wo.sla_response_deadline
                        ELSE TRUE
                    END as response_sla_met,
                    CASE 
                        WHEN wo.actual_end_date IS NOT NULL AND wo.sla_resolution_deadline IS NOT NULL
                        THEN wo.actual_end_date <= wo.sla_resolution_deadline
                        ELSE TRUE
                    END as resolution_sla_met,
                    CASE 
                        WHEN wo.actual_start_date IS NOT NULL
                        THEN EXTRACT(EPOCH FROM (wo.actual_start_date - wo.create_date)) / 3600.0
                        ELSE NULL
                    END as response_time_hours,
                    CASE 
                        WHEN wo.actual_end_date IS NOT NULL
                        THEN EXTRACT(EPOCH FROM (wo.actual_end_date - wo.create_date)) / 3600.0
                        ELSE NULL
                    END as resolution_time_hours,
                    sla.response_time_hours as sla_response_target,
                    sla.resolution_time_hours as sla_resolution_target
                FROM maintenance_workorder wo
                LEFT JOIN facilities_asset a ON wo.asset_id = a.id
                LEFT JOIN maintenance_workorder_sla sla ON wo.sla_id = sla.id
            )
        """ % self._table)

--- File: models/floor.py ---
# models/floor.py
from odoo import models, fields, api

class FacilityFloor(models.Model):
    _name = 'facilities.floor'
    _description = 'Facility Floor'
    _rec_name = 'name'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string='Floor Number/Name', required=True)
    code = fields.Char(string='Floor Code', required=True, copy=False, readonly=True, default='New')
    building_id = fields.Many2one('facilities.building', string='Building', required=True, ondelete='restrict', help="The building this floor belongs to.")
    facility_id = fields.Many2one('facilities.facility', related='building_id.facility_id', string='Facility', store=True, readonly=True, help="The facility this floor indirectly belongs to via its building.")
    manager_id = fields.Many2one('hr.employee', string='Floor Manager')
    active = fields.Boolean(string='Active', default=True)

    # Floor Specific Fields
    level = fields.Integer(string='Level', help="Floor level (e.g., 0 for ground, 1 for first floor).")
    area_sqm = fields.Float(string='Area (sqm)', digits=(10, 2))
    description = fields.Text(string='Description')
    notes = fields.Text(string='Notes')

    # NEW: One2many relationship to Rooms
    room_ids = fields.One2many('facilities.room', 'floor_id', string='Rooms', help="List of rooms on this floor.")
    room_count = fields.Integer(compute='_compute_room_count', string='Number of Rooms', store=True)

    @api.depends('room_ids')
    def _compute_room_count(self):
        for rec in self:
            rec.room_count = len(rec.room_ids)

    @api.model
    def create(self, vals):
        if vals.get('code', 'New') == 'New':
            vals['code'] = self.env['ir.sequence'].next_by_code('facilities.floor') or 'New'
        result = super(FacilityFloor, self).create(vals)
        return result

    @api.constrains('building_id')
    def _check_building_id(self):
        for rec in self:
            if not rec.building_id:
                raise fields.ValidationError("A floor must be linked to a Building.")

--- File: models/hr_employee.py ---
# -*- coding: utf-8 -*-
from odoo import fields, models

class HrEmployee(models.Model):
    _inherit = 'hr.employee'

    is_technician = fields.Boolean(string="Is Technician", default=False,
                                   help="Check this box if the employee is a technician eligible for work orders.")

--- File: models/hr_employee_extension.py ---
from odoo import models, fields, api


class HrEmployee(models.Model):
    _inherit = 'hr.employee'

    hourly_cost = fields.Float(
        string='Hourly Cost',
        default=50.0,
        help="Cost per hour for this employee"
    )
    is_technician = fields.Boolean(
        string='Is Technician',
        default=False,
        help="Check if this employee is a maintenance technician"
    )
    current_workload = fields.Float(
        string='Current Workload (%)',
        compute='_compute_current_workload',
        help="Current workload percentage based on active work orders"
    )

    def _compute_current_workload(self):
        for employee in self:
            # Only compute if maintenance workorder model exists
            if 'maintenance.workorder' in self.env:
                try:
                    # Calculate current workload based on active work orders
                    active_workorders = self.env['maintenance.workorder'].search([
                        ('assigned_technician_ids', 'in', employee.id),
                        ('status', 'in', ['draft', 'in_progress'])
                    ])
                    # Simple calculation: each active workorder = 20% workload (max 100%)
                    employee.current_workload = min(100.0, len(active_workorders) * 20.0)
                except Exception:
                    employee.current_workload = 0.0
            else:
                employee.current_workload = 0.0

--- File: models/maintenance_job_plan.py ---
from odoo import models, fields, api, _

class MaintenanceJobPlan(models.Model):
    _name = 'maintenance.job.plan'
    _description = 'Maintenance Job Plan'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    name = fields.Char(string='Job Plan Name', required=True, translate=True)
    code = fields.Char(string='Code', copy=False, default=lambda self: _('New'))
    description = fields.Html(string='Description / Guidelines')
    active = fields.Boolean(default=True)
    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.company)
    asset_category_ids = fields.Many2many('facilities.asset.category', string='Applicable Asset Categories')
    section_ids = fields.One2many('maintenance.job.plan.section', 'job_plan_id', string='Sections', copy=True)

    # Computed field to get all tasks under this job plan via all sections
    task_ids = fields.One2many(
        'maintenance.job.plan.task',
        'job_plan_id',
        string='All Tasks',
        compute='_compute_task_ids',
        store=False,
    )

    _sql_constraints = [
        ('code_unique', 'unique(code)', 'The code of the job plan must be unique!'),
    ]

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if vals.get('code', _('New')) == _('New'):
                vals['code'] = self.env['ir.sequence'].next_by_code('maintenance.job.plan') or _('New')
        return super().create(vals_list)

    @api.depends('section_ids.task_ids')
    def _compute_task_ids(self):
        for plan in self:
            plan.task_ids = plan.section_ids.mapped('task_ids')

--- File: models/maintenance_workorder.py ---
from odoo import models, fields, api, _
from odoo.exceptions import UserError, ValidationError
import logging
from datetime import timedelta

_logger = logging.getLogger(__name__)

APPROVAL_STATES = [
    ('draft', 'Draft'),
    ('submitted', 'Submitted'),
    ('supervisor', 'Supervisor Approved'),
    ('manager', 'Manager Approved'),
    ('approved', 'Fully Approved'),
    ('in_progress', 'In Progress'),
    ('done', 'Completed'),
    ('refused', 'Refused'),
    ('cancelled', 'Cancelled'),
    ('escalated', 'Escalated'),
]

class MaintenanceWorkOrder(models.Model):
    _name = 'maintenance.workorder'
    _description = 'Maintenance Work Order'
    _inherit = ['mail.thread', 'mail.activity.mixin']

    SERVICE_TYPE_SELECTION = [
        ('maintenance', 'Maintenance'),
        ('cleaning', 'Cleaning'),
        ('security', 'Security'),
        ('esg', 'ESG Compliance'),
        ('hse', 'HSE Incident')
    ]

    name = fields.Char(string='Work Order Reference', required=True, copy=False, readonly=True,
                       default=lambda self: _('New'))
    asset_id = fields.Many2one('facilities.asset', string='Asset', required=True)
    facility_id = fields.Many2one('facilities.facility', string='Facility',
                                  related='asset_id.facility_id', store=True, readonly=True)
    room_id = fields.Many2one('facilities.room', string='Room',
                              related='asset_id.room_id', store=True, readonly=True)
    building_id = fields.Many2one('facilities.building', string='Building',
                                  related='asset_id.building_id', store=True, readonly=True)
    floor_id = fields.Many2one('facilities.floor', string='Floor',
                               related='asset_id.floor_id', store=True, readonly=True)
    schedule_id = fields.Many2one('asset.maintenance.schedule', string='Maintenance Schedule')
    work_order_type = fields.Selection([
        ('preventive', 'Preventive'),
        ('corrective', 'Corrective'),
        ('predictive', 'Predictive'),
        ('inspection', 'Inspection'),
    ], string='Type', default='corrective', required=True)
    technician_id = fields.Many2one('hr.employee', string='Primary Technician', domain="[('is_technician', '=', True)]")
    supervisor_id = fields.Many2one('res.users', string="Supervisor", readonly=True)
    permit_ids = fields.One2many('maintenance.workorder.permit', 'workorder_id', string='Permits')
    manager_id = fields.Many2one('res.users', string="Manager", readonly=True)
    start_date = fields.Datetime(string='Scheduled Start Date')
    end_date = fields.Datetime(string='Scheduled End Date')
    actual_start_date = fields.Datetime(string='Actual Start Date', readonly=True)
    actual_end_date = fields.Datetime(string='Actual End Date', readonly=True)
    status = fields.Selection([
        ('draft', 'Draft'),
        ('in_progress', 'In Progress'),
        ('done', 'Completed'),
        ('cancelled', 'Cancelled'),
    ], default='draft', string='Status', tracking=True)
    assignment_ids = fields.One2many('maintenance.workorder.assignment', 'workorder_id', string='Assignments')
    priority = fields.Selection([
        ('0', 'Very Low'),
        ('1', 'Low'),
        ('2', 'Normal'),
        ('3', 'High'),
    ], string='Priority', default='1')

    description = fields.Text(string='Work Order Description')
    work_done = fields.Text(string='Work Done Notes')
    parts_used_ids = fields.One2many('maintenance.workorder.part_line', 'workorder_id', string='Parts Used')
    picking_id = fields.Many2one('stock.picking', string='Parts Transfer', copy=False,
                                 help="The internal transfer for parts issued for this work order.")
    picking_count = fields.Integer(compute='_compute_picking_count', string='Transfers')
    has_parts = fields.Boolean(compute='_compute_has_parts', store=True,
                               help="Indicates if this work order has parts lines.")

    service_type = fields.Selection(
        SERVICE_TYPE_SELECTION,
        string="Service Type",
        tracking=True,
        help="Department/Service this work order belongs to."
    )
    maintenance_team_id = fields.Many2one(
        'maintenance.team', string="Maintenance Team",
        help="The team assigned to handle this work order."
    )

    section_ids = fields.One2many('maintenance.workorder.section', 'workorder_id', string='Sections')
    workorder_task_ids = fields.One2many('maintenance.workorder.task', 'workorder_id', string='Tasks', copy=True)
    all_tasks_completed = fields.Boolean(compute='_compute_all_tasks_completed', store=False,
                                         help="Indicates if all checklist tasks are marked as completed.")
    job_plan_id = fields.Many2one('maintenance.job.plan', string='Job Plan',
                                  help="The job plan linked to this work order, providing detailed tasks.")

    sla_id = fields.Many2one('maintenance.workorder.sla', string='Applied SLA', readonly=True)
    sla_response_deadline = fields.Datetime(string='Response Deadline', readonly=True)
    sla_resolution_deadline = fields.Datetime(string='Resolution Deadline', readonly=True)
    sla_response_status = fields.Selection([
        ('on_time', 'On Time'),
        ('warning', 'Warning'),
        ('critical', 'Critical'),
        ('breached', 'Breached')
    ], string='Response SLA Status', compute='_compute_sla_status', store=True)
    sla_resolution_status = fields.Selection([
        ('on_time', 'On Time'),
        ('warning', 'Warning'),
        ('critical', 'Critical'),
        ('breached', 'Breached')
    ], string='Resolution SLA Status', compute='_compute_sla_status', store=True)

    approval_state = fields.Selection(
        APPROVAL_STATES, string="Approval State", default='draft', tracking=True
    )
    submitted_by_id = fields.Many2one('res.users', string="Submitted By", readonly=True)
    approved_by_id = fields.Many2one('res.users', string="Approved By", readonly=True)
    approval_request_date = fields.Datetime(string="Approval Requested At")
    escalation_deadline = fields.Datetime(string="Escalation Deadline")
    escalation_to_id = fields.Many2one('res.users', string="Escalate To")
    escalation_count = fields.Integer(string="Escalation Count", default=0, readonly=True)

    @api.onchange('technician_id')
    def _onchange_technician_fill_supervisor_manager(self):
        for rec in self:
            rec.supervisor_id, rec.manager_id = rec._get_supervisor_manager_from_technician(rec.technician_id)

    def _get_supervisor_manager_from_technician(self, technician):
        supervisor_user = False
        manager_user = False
        if technician and technician.parent_id and technician.parent_id.user_id:
            supervisor_user = technician.parent_id.user_id
            if technician.parent_id.parent_id and technician.parent_id.parent_id.user_id:
                manager_user = technician.parent_id.parent_id.user_id
        return supervisor_user, manager_user

    @api.model_create_multi
    def create(self, vals_list):
        for vals in vals_list:
            if vals.get('name', _('New')) == _('New'):
                vals['name'] = self.env['ir.sequence'].next_by_code('maintenance.workorder') or _('New')
            technician = self.env['hr.employee'].browse(vals.get('technician_id'))
            supervisor_user, manager_user = self._get_supervisor_manager_from_technician(technician)
            vals['supervisor_id'] = supervisor_user.id if supervisor_user else False
            vals['manager_id'] = manager_user.id if manager_user else False
        records = super().create(vals_list)
        for rec in records:
            if rec.job_plan_id:
                rec._copy_job_plan_sections_and_tasks()
            rec._apply_sla()
        return records

    def write(self, vals):
        if 'technician_id' in vals:
            technician = self.env['hr.employee'].browse(vals['technician_id'])
            supervisor_user, manager_user = self._get_supervisor_manager_from_technician(technician)
            vals['supervisor_id'] = supervisor_user.id if supervisor_user else False
            vals['manager_id'] = manager_user.id if manager_user else False
        result = super().write(vals)
        if any(field in vals for field in ['priority', 'asset_id', 'work_order_type']):
            for rec in self:
                rec._apply_sla()
        return result

    @api.depends('section_ids.task_ids.is_done', 'workorder_task_ids.is_done')
    def _compute_all_tasks_completed(self):
        for wo in self:
            sectioned_tasks = wo.section_ids.mapped('task_ids')
            flat_tasks = wo.workorder_task_ids
            all_tasks = sectioned_tasks | flat_tasks
            if not all_tasks:
                wo.all_tasks_completed = True
            else:
                wo.all_tasks_completed = all(task.is_done for task in all_tasks if task.is_checklist_item)

    @api.depends('parts_used_ids')
    def _compute_has_parts(self):
        for rec in self:
            rec.has_parts = bool(rec.parts_used_ids)

    @api.depends('picking_id')
    def _compute_picking_count(self):
        for rec in self:
            rec.picking_count = 1 if rec.picking_id else 0

    def _apply_sla(self):
        try:
            sla = self.env['maintenance.workorder.sla'].find_matching_sla(self)
            if sla:
                current_time = fields.Datetime.now()
                self.write({
                    'sla_id': sla.id,
                    'sla_response_deadline': current_time + timedelta(hours=sla.response_time_hours),
                    'sla_resolution_deadline': current_time + timedelta(hours=sla.resolution_time_hours),
                })
        except Exception:
            pass

    @api.depends('sla_response_deadline', 'sla_resolution_deadline', 'actual_start_date', 'actual_end_date', 'status')
    def _compute_sla_status(self):
        for record in self:
            if not record.sla_response_deadline:
                record.sla_response_status = 'on_time'
                record.sla_resolution_status = 'on_time'
                continue

            current_time = fields.Datetime.now()

            # Response SLA Status
            if record.actual_start_date:
                record.sla_response_status = 'on_time'
            else:
                time_remaining = (record.sla_response_deadline - current_time).total_seconds()
                total_time = (record.sla_response_deadline - record.create_date).total_seconds()
                percentage_used = ((total_time - time_remaining) / total_time) * 100 if total_time > 0 else 0

                if time_remaining <= 0:
                    record.sla_response_status = 'breached'
                elif percentage_used >= (record.sla_id.critical_threshold if record.sla_id else 95):
                    record.sla_response_status = 'critical'
                elif percentage_used >= (record.sla_id.warning_threshold if record.sla_id else 80):
                    record.sla_response_status = 'warning'
                else:
                    record.sla_response_status = 'on_time'

            # Resolution SLA Status
            if record.status == 'done':
                record.sla_resolution_status = 'on_time'
            else:
                time_remaining = (record.sla_resolution_deadline - current_time).total_seconds()
                total_time = (record.sla_resolution_deadline - record.create_date).total_seconds()
                percentage_used = ((total_time - time_remaining) / total_time) * 100 if total_time > 0 else 0

                if time_remaining <= 0:
                    record.sla_resolution_status = 'breached'
                elif percentage_used >= (record.sla_id.critical_threshold if record.sla_id else 95):
                    record.sla_resolution_status = 'critical'
                elif percentage_used >= (record.sla_id.warning_threshold if record.sla_id else 80):
                    record.sla_resolution_status = 'warning'
                else:
                    record.sla_resolution_status = 'on_time'

    def _sync_status_with_approval(self):
        for rec in self:
            if rec.approval_state in ['refused', 'cancelled']:
                rec.status = 'cancelled'
            elif rec.approval_state == 'done':
                rec.status = 'done'
            elif rec.approval_state == 'in_progress':
                rec.status = 'in_progress'
            elif rec.approval_state == 'draft':
                rec.status = 'draft'

    def _create_approval_activity(self, user, summary, note):
        if not user or not user.id:
            _logger.warning("No valid user for activity: %s", user)
            return
        activity_type = self.env.ref('mail.mail_activity_data_todo')
        model_id = self.env['ir.model']._get_id('maintenance.workorder')
        self.env['mail.activity'].create({
            'activity_type_id': activity_type.id,
            'res_id': self.id,
            'res_model_id': model_id,
            'user_id': user.id,
            'summary': summary,
            'note': note,
            'date_deadline': fields.Date.today() + timedelta(days=1),
        })

    def action_submit_for_approval(self):
        for rec in self:
            if rec.approval_state != 'draft':
                raise UserError(_("Only draft work orders can be submitted!"))
            rec.write({
                'approval_state': 'submitted',
                'submitted_by_id': self.env.user.id,
                'approval_request_date': fields.Datetime.now(),
                'escalation_deadline': fields.Datetime.now() + timedelta(hours=24),
                'escalation_count': 0,
            })
            rec._sync_status_with_approval()
            if rec.supervisor_id:
                rec._create_approval_activity(
                    rec.supervisor_id,
                    _('Supervisor Approval Required'),
                    _('Please approve work order %s.') % rec.name
                )

    def action_supervisor_approve(self):
        for rec in self:
            if rec.approval_state != 'submitted':
                raise UserError(_("Must be in submitted state!"))
            rec.write({
                'approval_state': 'supervisor',
                'approved_by_id': self.env.user.id,
                'escalation_deadline': fields.Datetime.now() + timedelta(hours=24),
                'escalation_count': rec.escalation_count,
            })
            rec._sync_status_with_approval()
            if rec.manager_id:
                rec._create_approval_activity(
                    rec.manager_id,
                    _('Manager Approval Required'),
                    _('Please approve work order %s.') % rec.name
                )

    def action_manager_approve(self):
        for rec in self:
            if rec.approval_state != 'supervisor':
                raise UserError(_("Must be supervisor approved!"))
            rec.write({
                'approval_state': 'manager',
                'approved_by_id': self.env.user.id,
                'escalation_deadline': False,
                'escalation_count': rec.escalation_count,
            })
            rec._sync_status_with_approval()

    def action_fully_approve(self):
        for rec in self:
            if rec.approval_state != 'manager':
                raise UserError(_("Must be manager approved!"))
            rec.write({
                'approval_state': 'approved',
                'approved_by_id': self.env.user.id,
            })
            rec._sync_status_with_approval()
            if rec.technician_id and hasattr(rec.technician_id, 'user_id') and rec.technician_id.user_id:
                rec._create_approval_activity(
                    rec.technician_id.user_id,
                    _('Start Work Order'),
                    _('You can start work order %s.') % rec.name
                )

    def action_refuse(self):
        for rec in self:
            rec.write({'approval_state': 'refused'})
            rec._sync_status_with_approval()

    def action_cancel(self):
        for rec in self:
            rec.write({'approval_state': 'cancelled'})
            rec._sync_status_with_approval()

    def action_escalate(self):
        for rec in self:
            if rec.escalation_deadline and fields.Datetime.now() > rec.escalation_deadline:
                if rec.approval_state == 'submitted' and rec.manager_id:
                    rec.write({
                        'approval_state': 'escalated',
                        'escalation_to_id': rec.manager_id.id,
                        'escalation_count': rec.escalation_count + 1,
                        'escalation_deadline': fields.Datetime.now() + timedelta(hours=24),
                    })
                    rec._sync_status_with_approval()
                    rec._create_approval_activity(
                        rec.manager_id,
                        _('Manager Approval Required (Escalated)'),
                        _('Work order %s has been escalated for your approval.') % rec.name
                    )

    @api.model
    def cron_auto_escalate_workorders(self):
        workorders = self.search([
            ('approval_state', 'in', ['submitted', 'supervisor']),
            ('escalation_deadline', '<', fields.Datetime.now())
        ])
        for wo in workorders:
            wo.action_escalate()

    def _copy_job_plan_sections_and_tasks(self):
        self.ensure_one()
        if self.job_plan_id and not self.section_ids:
            for section_template in self.job_plan_id.section_ids.sorted('sequence'):
                section = self.env['maintenance.workorder.section'].create({
                    'workorder_id': self.id,
                    'name': section_template.name,
                    'sequence': section_template.sequence,
                })
                for task_template in section_template.task_ids.sorted('sequence'):
                    self.env['maintenance.workorder.task'].create({
                        'workorder_id': self.id,
                        'section_id': section.id,
                        'name': task_template.name,
                        'sequence': task_template.sequence,
                        'description': task_template.description,
                        'frequency_type': task_template.frequency_type,
                        'is_checklist_item': task_template.is_checklist_item,
                        'is_done': False,
                        'notes': False,
                    })

    def action_start_progress(self):
        for rec in self:
            if rec.status == 'draft':
                rec.write({
                    'status': 'in_progress',
                    'actual_start_date': fields.Datetime.now(),
                })
            else:
                raise UserError(_("Work order must be in 'Draft' state to start progress."))

    def action_complete(self):
        for rec in self:
            if rec.status == 'in_progress':
                if not rec.all_tasks_completed:
                    raise UserError(_("Cannot complete work order: Not all checklist tasks are marked as completed."))
                rec.write({
                    'status': 'done',
                    'actual_end_date': fields.Datetime.now(),
                })
                if rec.schedule_id and rec.actual_end_date:
                    rec.schedule_id.last_maintenance_date = rec.actual_end_date.date()
            else:
                raise UserError(_("Work order must be 'In Progress' to complete."))

    def action_reset_to_draft(self):
        for rec in self:
            if rec.status != 'draft':
                rec.write({
                    'status': 'draft',
                    'actual_start_date': False,
                    'actual_end_date': False,
                })
                rec.approval_state = 'draft'
            else:
                raise UserError(_("Work order is already in draft state."))

    def action_view_picking(self):
        self.ensure_one()
        if not self.picking_id:
            raise UserError(_("No parts transfer associated with this work order."))

        return {
            'type': 'ir.actions.act_window',
            'name': _('Parts Transfer'),
            'res_model': 'stock.picking',
            'res_id': self.picking_id.id,
            'view_mode': 'form',
            'target': 'current',
        }

    def action_assign_technician(self):
        return {
            'type': 'ir.actions.act_window',
            'name': 'Assign Technician',
            'res_model': 'assign.technician.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {'default_workorder_id': self.id}
        }

    def action_report_downtime(self):
        for rec in self:
            return {
                'type': 'ir.actions.act_window',
                'name': _('Report Downtime'),
                'res_model': 'asset.downtime.reason',
                'view_mode': 'tree,form',
                'target': 'new',
                'context': {'default_asset_id': rec.asset_id.id}
            }

--- File: models/product.py ---
# -*- coding: utf-8 -*-
from odoo import models, fields


class ProductProduct(models.Model):
    _inherit = 'product.product'

    service_policy = fields.Char(compute='_compute_dummy', store=False)
    service_tracking = fields.Selection(
        selection=[('no', 'No Tracking')],
        default='no',
        compute='_compute_dummy',
        store=False
    )

    def _compute_dummy(self):
        for record in self:
            record.service_policy = False
            record.service_tracking = 'no'

--- File: models/predictive_maintenance.py ---
# models/predictive_maintenance.py
from odoo import models, fields

class PredictiveMaintenance(models.Model):
    _name = 'predictive.maintenance'
    _inherit = 'asset.maintenance.schedule'

    algorithm = fields.Selection([
        ('linear', 'Linear Regression'),
        ('mlp', 'Neural Network'),
        ('svm', 'SVM')
    ], default='linear')
    training_data = fields.Binary('Dataset')
    accuracy = fields.Float(compute='_compute_accuracy')

--- File: models/stock_picking.py ---
# /home/ranjith/odoo_projects/odoo17/addons/facilities_management/models/stock_picking.py
from odoo import fields, models, api, _

class StockPicking(models.Model):
    _inherit = 'stock.picking'

    workorder_id = fields.Many2one(
        'maintenance.workorder',
        string='Maintenance Work Order',
        help="Link to the Maintenance Work Order that generated this stock transfer.",
        copy=False # Do not copy this link when duplicating a picking
    )

class StockMove(models.Model):
    _inherit = 'stock.move'

    workorder_id = fields.Many2one('maintenance.workorder', string='Maintenance Work Order',
                                   help='Related Maintenance Work Order', copy=False)

--- File: security/ir.model.access.csv ---
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_facilities_facility_user,facilities.facility.user,model_facilities_facility,base.group_user,1,1,1,1
access_facilities_building_user,facilities.building.user,model_facilities_building,base.group_user,1,1,1,1
access_facilities_floor_user,facilities.floor.user,model_facilities_floor,base.group_user,1,1,1,1
access_facilities_room_user,facilities.room.user,model_facilities_room,base.group_user,1,1,1,1
access_facilities_asset_user,facilities.asset.user,model_facilities_asset,base.group_user,1,1,1,1
access_facilities_asset_category_user,facilities.asset.category.user,model_facilities_asset_category,base.group_user,1,1,1,1
access_asset_maintenance_schedule_user,asset.maintenance.schedule.user,model_asset_maintenance_schedule,base.group_user,1,1,1,1
access_facilities_asset_depreciation_user,facilities.asset.depreciation.user,model_facilities_asset_depreciation,base.group_user,1,1,1,1
access_maintenance_workorder_user,maintenance.workorder.user,model_maintenance_workorder,base.group_user,1,1,1,1
access_maintenance_workorder_task_user,maintenance.workorder.task.user,model_maintenance_workorder_task,base.group_user,1,1,1,1
access_maintenance_workorder_part_line_user,maintenance.workorder.part.line.user,model_maintenance_workorder_part_line,base.group_user,1,1,1,1
access_maintenance_workorder_assignment_user,maintenance.workorder.assignment.user,model_maintenance_workorder_assignment,base.group_user,1,1,1,1
access_maintenance_workorder_type_user,maintenance.workorder.type.user,model_maintenance_workorder_type,base.group_user,1,1,1,1
access_maintenance_job_plan_user,maintenance.job.plan.user,model_maintenance_job_plan,base.group_user,1,1,1,1
access_maintenance_job_plan_task_user,maintenance.job.plan.task.user,model_maintenance_job_plan_task,base.group_user,1,1,1,1
access_predictive_maintenance_user,predictive.maintenance.user,model_predictive_maintenance,base.group_user,1,1,1,1
access_maintenance_workorder_sla_user,maintenance.workorder.sla.user,model_maintenance_workorder_sla,base.group_user,1,1,1,1
access_maintenance_resource_utilization_user,maintenance.resource.utilization.user,model_maintenance_resource_utilization,base.group_user,1,1,1,1
access_maintenance_sla_analytics_user,maintenance.sla.analytics.user,model_maintenance_sla_analytics,base.group_user,1,1,1,1
access_facilities_asset_performance_user,facilities.asset.performance.user,model_facilities_asset_performance,base.group_user,1,1,1,1
access_asset_downtime_reason_user,asset.downtime.reason.user,model_asset_downtime_reason,base.group_user,1,1,1,1
access_maintenance_job_plan_section_user,maintenance.job.plan.section user,model_maintenance_job_plan_section,base.group_user,1,1,1,1
access_maintenance_workorder_section_user,maintenance.workorder.section user,model_maintenance_workorder_section,base.group_user,1,1,1,1
access_assign_technician_wizard_user,assign.technician.wizard.user,model_assign_technician_wizard,base.group_user,1,1,1,1
access_maintenance_workorder_permit_user,maintenance.workorder.permit user,model_maintenance_workorder_permit,base.group_user,1,1,1,1
access_maintenance_workorder_permit_manager,maintenance.workorder.permit manager,model_maintenance_workorder_permit,base.group_system,1,1,1,1

--- File: security/facility_management_security.xml ---
<?xml version="1.0"?>
<odoo>
    <data noupdate="1">

        <!-- Facilities Management Category -->
        <record id="module_category_facilities" model="ir.module.category">
            <field name="name">Facilities Management</field>
            <field name="description">Helps you manage facilities, assets, and maintenance operations.</field>
            <field name="sequence">10</field>
        </record>

        <!-- Facilities Management Groups -->
        <record id="group_facilities_technician" model="res.groups">
            <field name="name">Facilities Technician</field>
            <field name="category_id" ref="module_category_facilities"/>
            <field name="comment">The user will be able to view and manage maintenance work orders assigned to them.</field>
        </record>

        <record id="group_facilities_user" model="res.groups">
            <field name="name">Facilities User</field>
            <field name="category_id" ref="module_category_facilities"/>
            <field name="implied_ids" eval="[(4, ref('group_facilities_technician'))]"/>
            <field name="comment">The user will be able to create and manage facilities, assets, and maintenance requests.</field>
        </record>

        <record id="group_facilities_manager" model="res.groups">
            <field name="name">Facilities Manager</field>
            <field name="category_id" ref="module_category_facilities"/>
            <field name="implied_ids" eval="[(4, ref('group_facilities_user'))]"/>
            <field name="comment">The user will have full access to all facilities management features including configuration and reports.</field>
        </record>

    </data>
</odoo>

--- File: wizard/assign_technician_wizard.py ---
from odoo import models, fields

class AssignTechnicianWizard(models.TransientModel):
    _name = 'assign.technician.wizard'
    _description = 'Assign Technician Wizard'

    technician_id = fields.Many2one('hr.employee', string="Technician", required=True)
    workorder_id = fields.Many2one('maintenance.workorder', string="Work Order", required=True)

    def action_assign(self):
        self.workorder_id.technician_id = self.technician_id.id

--- File: wizard/__init__.py ---
from . import assign_technician_wizard

--- File: data/sequences.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="seq_asset_maintenance" model="ir.sequence">
        <field name="name">Asset Maintenance Schedule Reference</field>
        <field name="code">asset.maintenance.schedule</field>
        <field name="prefix">MAINT/</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_maintenance_workorder" model="ir.sequence">
        <field name="name">Maintenance Work Order Reference</field>
        <field name="code">maintenance.workorder</field>
        <field name="prefix">WO/</field>
        <field name="padding">5</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_facility_code" model="ir.sequence">
        <field name="name">Facility Code</field>
        <field name="code">facilities.facility</field>
        <field name="prefix">FAC</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_building_code" model="ir.sequence">
        <field name="name">Building Code</field>
        <field name="code">facilities.building</field>
        <field name="prefix">BLD</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_floor_code" model="ir.sequence">
        <field name="name">Floor Code</field>
        <field name="code">facilities.floor</field>
        <field name="prefix">FLR</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_room_code" model="ir.sequence">
        <field name="name">Room Code</field>
        <field name="code">facilities.room</field>
        <field name="prefix">ROM</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_maintenance_job_plan" model="ir.sequence">
        <field name="name">Maintenance Job Plan Sequence</field>
        <field name="code">maintenance.job.plan</field>
        <field name="prefix">JP</field>
        <field name="padding">5</field>
        <field name="company_id" eval="False"/>
    </record>

    <record id="seq_facilities_asset_barcode" model="ir.sequence">
        <field name="name">Asset Barcode</field>
        <field name="code">facilities.asset.barcode</field>
        <field name="prefix">AS</field>
        <field name="padding">4</field>
    </record>

    <!-- Add asset code sequence -->
    <record id="seq_facilities_asset" model="ir.sequence">
        <field name="name">Asset Code</field>
        <field name="code">facilities.asset</field>
        <field name="prefix">AST</field>
        <field name="padding">4</field>
        <field name="company_id" eval="False"/>
    </record>
</odoo>

--- File: data/email_templates.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <record id="email_template_maintenance_reminder" model="mail.template">
            <field name="name">Maintenance Schedule Reminder</field>
            <field name="model_id" ref="facilities_management.model_asset_maintenance_schedule"/>
            <field name="email_from">${(object.technician_id.user_id.email_formatted or user.email_formatted)}</field>
            <field name="email_to">${(object.technician_id.user_id.email_formatted or '')}</field>
            <field name="subject">Upcoming Maintenance for ${object.asset_id.name}</field>
            <field name="body_html" type="html">
                <div style="margin: 0px; padding: 0px;">
                    <p style="margin: 0px; padding: 0px; font-size: 13px;">
                        Dear <t t-out="object.technician_id.name or 'Recipient'"/>,
                        <br/><br/>
                        This is a reminder for the upcoming maintenance:
                        <br/>
                        <ul>
                            <li><strong>Asset:</strong> <t t-out="object.asset_id.name"/></li>
                            <li><strong>Reference:</strong> <t t-out="object.name"/></li>
                            <li><strong>Type:</strong> <t t-out="object.maintenance_type"/></li>
                            <li><strong>Scheduled Date:</strong> <t t-out="object.maintenance_date"/></li>
                        </ul>
                        <br/>
                        Please ensure all necessary preparations are made.
                        <br/><br/>
                        Thank you,
                        <br/>
                        Your Facilities Management Team
                    </p>
                </div>
            </field>
            <field name="lang">${object.technician_id.user_id.lang}</field>
            <field name="auto_delete" eval="True"/>
        </record>
    </data>
</odoo>

--- File: data/predictive_parameters.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    </odoo>

--- File: data/maintenance_cron.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="0">
        <record id="ir_cron_advanced_maintenance" model="ir.cron">
            <field name="name">Generate Preventive Maintenance Work Orders</field> <!-- More descriptive name -->
            <field name="model_id" ref="model_asset_maintenance_schedule"/>
            <field name="state">code</field>
            <field name="code">model._generate_preventive_workorders()</field> <!-- Calls the new method -->
            <field name="interval_number">1</field>
            <field name="interval_type">days</field> <!-- Changed to days for daily check -->
            <field name="numbercall">-1</field> <!-- Unlimited calls -->
        </record>

        <record id="ir_cron_auto_escalate_workorders" model="ir.cron">
            <field name="name">Auto Escalate Maintenance Work Orders</field>
            <field name="model_id" ref="model_maintenance_workorder"/>
            <field name="state">code</field>
            <field name="code">model.cron_auto_escalate_workorders()</field>
            <field name="interval_number">1</field>
            <field name="interval_type">hours</field> <!-- Check every hour -->
            <field name="numbercall">-1</field>
            <field name="active">True</field>
        </record>
    </data>
</odoo>

--- File: views/sla_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- SLA Configuration: Tree View -->
    <record id="view_maintenance_workorder_sla_tree" model="ir.ui.view">
        <field name="name">maintenance.workorder.sla.tree</field>
        <field name="model">maintenance.workorder.sla</field>
        <field name="arch" type="xml">
            <tree>
                <field name="sequence"/>
                <field name="name"/>
                <field name="priority"/>
                <field name="facility_id"/>
                <field name="location"/>
                <field name="work_order_type"/>
                <field name="response_time_hours"/>
                <field name="resolution_time_hours"/>
                <field name="warning_threshold"/>
                <field name="critical_threshold"/>
                <field name="active"/>
            </tree>
        </field>
    </record>

    <!-- SLA Configuration: Form View -->
    <record id="view_maintenance_workorder_sla_form" model="ir.ui.view">
        <field name="name">maintenance.workorder.sla.form</field>
        <field name="model">maintenance.workorder.sla</field>
        <field name="arch" type="xml">
            <form>
                <sheet>
                    <group>
                        <field name="active"/>
                        <field name="sequence"/>
                        <field name="name"/>
                    </group>
                    <group string="SLA Criteria">
                        <field name="priority"/>
                        <field name="facility_id"/>
                        <field name="location"/>
                        <field name="work_order_type"/>
                    </group>
                    <group string="SLA Targets">
                        <field name="response_time_hours"/>
                        <field name="resolution_time_hours"/>
                    </group>
                    <group string="Thresholds &amp; Escalation">
                        <field name="warning_threshold"/>
                        <field name="critical_threshold"/>
                        <field name="escalation_enabled"/>
                        <field name="escalation_manager_id"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- SLA Analytics Views (unchanged, for reference) -->
    <record id="view_maintenance_sla_analytics_tree" model="ir.ui.view">
        <field name="name">maintenance.sla.analytics.tree</field>
        <field name="model">maintenance.sla.analytics</field>
        <field name="arch" type="xml">
            <tree>
                <field name="workorder_id"/>
                <field name="priority"/>
                <field name="facility_id"/>
                <field name="response_sla_met"/>
                <field name="resolution_sla_met"/>
                <field name="response_time_hours"/>
                <field name="resolution_time_hours"/>
            </tree>
        </field>
    </record>

    <!-- Actions -->
    <record id="action_maintenance_workorder_sla" model="ir.actions.act_window">
        <field name="name">SLA Configuration</field>
        <field name="res_model">maintenance.workorder.sla</field>
        <field name="view_mode">tree,form</field>
    </record>

    <record id="action_maintenance_sla_analytics" model="ir.actions.act_window">
        <field name="name">SLA Analytics</field>
        <field name="res_model">maintenance.sla.analytics</field>
        <field name="view_mode">tree,pivot,graph</field>
    </record>

    <!-- Menu Items -->
    <menuitem id="menu_maintenance_sla_config"
              name="SLA Configuration"
              parent="facilities_management.menu_maintenance"
              action="action_maintenance_workorder_sla"
              sequence="60"/>

    <menuitem id="menu_maintenance_sla_analytics"
              name="SLA Analytics"
              parent="facilities_management.menu_maintenance"
              action="action_maintenance_sla_analytics"
              sequence="65"/>
</odoo>

--- File: views/assign_technician_wizard_view.xml ---
<odoo>
    <record id="view_assign_technician_wizard_form" model="ir.ui.view">
        <field name="name">assign.technician.wizard.form</field>
        <field name="model">assign.technician.wizard</field>
        <field name="arch" type="xml">
            <form string="Assign Technician">
                <group>
                    <field name="technician_id"/>
                </group>
                <footer>
                    <button name="action_assign" string="Assign" type="object" class="btn-primary"/>
                    <button string="Cancel" class="btn-secondary" special="cancel"/>
                </footer>
            </form>
        </field>
    </record>
</odoo>

--- File: views/asset_performance_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Asset Performance Tree View -->
    <record id="view_asset_performance_tree" model="ir.ui.view">
        <field name="name">facilities.asset.performance.tree</field>
        <field name="model">facilities.asset.performance</field>
        <field name="arch" type="xml">
            <tree string="Asset Performance" decoration-danger="performance_status == 'poor'"
                  decoration-warning="performance_status == 'average'"
                  decoration-success="performance_status == 'excellent'">
                <field name="date"/>
                <field name="asset_id"/>
                <field name="shift"/>
                <field name="expected_daily_runtime" sum="Total Expected"/>
                <field name="actual_runtime" sum="Total Actual"/>
                <field name="downtime_hours" sum="Total Downtime"/>
                <field name="runtime_percentage" widget="percentage"/>
                <field name="availability_percentage" widget="percentage"/>
                <field name="utilization_percentage" widget="percentage"/>
                <field name="performance_status"/>
                <field name="operator_id"/>
            </tree>
        </field>
    </record>

    <!-- Asset Performance Form View -->
    <record id="view_asset_performance_form" model="ir.ui.view">
        <field name="name">facilities.asset.performance.form</field>
        <field name="model">facilities.asset.performance</field>
        <field name="arch" type="xml">
            <form string="Asset Performance">
                <header>
                    <field name="performance_status" widget="statusbar"/>
                </header>
                <sheet>
                    <div class="oe_title">
                        <h1>
                            <field name="display_name" readonly="1"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="asset_id" options="{'no_create': True}"/>
                            <field name="date"/>
                            <field name="shift"/>
                            <field name="operator_id"/>
                        </group>
                        <group>
                            <field name="expected_daily_runtime" widget="float_time"/>
                            <field name="actual_runtime" widget="float_time"/>
                            <field name="downtime_hours" widget="float_time"/>
                        </group>
                    </group>

                    <group string="Performance Metrics" col="3">
                        <field name="runtime_percentage" widget="percentage"/>
                        <field name="availability_percentage" widget="percentage"/>
                        <field name="utilization_percentage" widget="percentage"/>
                    </group>

                    <group string="Downtime Information" col="1">
                        <field name="downtime_reason_ids" widget="many2many_tags"
                               options="{'color_field': 'color', 'no_create': True}"/>
                        <field name="notes" placeholder="Additional notes about performance, issues, or observations..."/>
                    </group>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids"/>
                    <field name="activity_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>

    <!-- Asset Performance Graph View -->
    <record id="view_asset_performance_graph" model="ir.ui.view">
        <field name="name">facilities.asset.performance.graph</field>
        <field name="model">facilities.asset.performance</field>
        <field name="arch" type="xml">
            <graph string="Asset Performance Analysis" type="line">
                <field name="date" type="row"/>
                <field name="availability_percentage" type="measure"/>
                <field name="runtime_percentage" type="measure"/>
                <field name="utilization_percentage" type="measure"/>
            </graph>
        </field>
    </record>

    <!-- Asset Performance Pivot View -->
    <record id="view_asset_performance_pivot" model="ir.ui.view">
        <field name="name">facilities.asset.performance.pivot</field>
        <field name="model">facilities.asset.performance</field>
        <field name="arch" type="xml">
            <pivot string="Performance Analysis">
                <field name="asset_id" type="row"/>
                <field name="date" type="col" interval="month"/>
                <field name="availability_percentage" type="measure"/>
                <field name="runtime_percentage" type="measure"/>
                <field name="actual_runtime" type="measure"/>
                <field name="downtime_hours" type="measure"/>
            </pivot>
        </field>
    </record>

    <!-- Asset Performance Search View -->
    <record id="view_asset_performance_search" model="ir.ui.view">
        <field name="name">facilities.asset.performance.search</field>
        <field name="model">facilities.asset.performance</field>
        <field name="arch" type="xml">
            <search string="Asset Performance">
                <field name="asset_id"/>
                <field name="date"/>
                <field name="operator_id"/>
                <field name="performance_status"/>

                <filter string="Today" name="today"
                        domain="[('date', '=', context_today().strftime('%Y-%m-%d'))]"/>
                <filter string="This Week" name="this_week"
                        domain="[('date', '&gt;=', (context_today() - datetime.timedelta(days=7)).strftime('%Y-%m-%d'))]"/>
                <filter string="Last 30 Days" name="last_30_days"
                        domain="[('date', '&gt;=', (context_today() - datetime.timedelta(days=30)).strftime('%Y-%m-%d'))]"/>
                <separator/>
                <filter string="Poor Performance" name="poor_performance"
                        domain="[('performance_status', '=', 'poor')]"/>
                <filter string="Good Performance" name="good_performance"
                        domain="[('performance_status', 'in', ['good', 'excellent'])]"/>

                <separator/>
                <group expand="0" string="Group By">
                    <filter string="Asset" name="group_by_asset" context="{'group_by': 'asset_id'}"/>
                    <filter string="Date" name="group_by_date" context="{'group_by': 'date'}"/>
                    <filter string="Shift" name="group_by_shift" context="{'group_by': 'shift'}"/>
                    <filter string="Performance Status" name="group_by_status" context="{'group_by': 'performance_status'}"/>
                    <filter string="Operator" name="group_by_operator" context="{'group_by': 'operator_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <!-- Downtime Reasons Tree View -->
    <record id="view_asset_downtime_reason_tree" model="ir.ui.view">
        <field name="name">asset.downtime.reason.tree</field>
        <field name="model">asset.downtime.reason</field>
        <field name="arch" type="xml">
            <tree string="Downtime Reasons">
                <field name="sequence" widget="handle"/>
                <field name="code"/>
                <field name="name"/>
                <field name="category"/>
                <field name="active"/>
            </tree>
        </field>
    </record>

    <!-- Downtime Reasons Form View -->
    <record id="view_asset_downtime_reason_form" model="ir.ui.view">
        <field name="name">asset.downtime.reason.form</field>
        <field name="model">asset.downtime.reason</field>
        <field name="arch" type="xml">
            <form string="Downtime Reason">
                <sheet>
                    <group>
                        <group>
                            <field name="name"/>
                            <field name="code"/>
                            <field name="category"/>
                        </group>
                        <group>
                            <field name="sequence"/>
                            <field name="color" widget="color_picker"/>
                            <field name="active"/>
                        </group>
                    </group>
                    <group string="Description">
                        <field name="description" nolabel="1"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Actions -->
    <record id="action_asset_performance" model="ir.actions.act_window">
        <field name="name">Asset Performance</field>
        <field name="res_model">facilities.asset.performance</field>
        <field name="view_mode">tree,form,graph,pivot</field>
        <field name="context">{
            'search_default_last_30_days': 1,
            'search_default_group_by_asset': 1
        }</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Track your first asset performance!
            </p>
            <p>
                Monitor daily runtime, downtime, and efficiency metrics for your assets.
            </p>
        </field>
    </record>

    <record id="action_asset_downtime_reasons" model="ir.actions.act_window">
        <field name="name">Downtime Reasons</field>
        <field name="res_model">asset.downtime.reason</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create downtime reason codes!
            </p>
            <p>
                Define standardized reasons for asset downtime to improve tracking and analysis.
            </p>
        </field>
    </record>

</odoo>

--- File: views/facility_asset_search.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Place your records inside the <data> tag -->
        <record id="view_facility_asset_search" model="ir.ui.view">
            <field name="name">facilities.asset.search</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <search>
                    <field name="name"/>
                    <field name="asset_tag"/>
                    <field name="serial_number"/>
                    <field name="condition"/>
                    <field name="warranty_status"/>
                </search>
            </field>
        </record>
    </data>
</odoo>


--- File: views/facility_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="view_facility_tree" model="ir.ui.view">
        <field name="name">facility.tree</field>
        <field name="model">facilities.facility</field>
        <field name="arch" type="xml">
            <tree decoration-muted="not active">
                <field name="name"/>
                <field name="code"/>
                <field name="manager_id"/>
                <field name="city"/>
                <field name="property_type"/>
                <field name="active" invisible="1"/>
            </tree>
        </field>
    </record>

    <record id="view_facility_form" model="ir.ui.view">
        <field name="name">facility.form</field>
        <field name="model">facilities.facility</field>
        <field name="arch" type="xml">
            <form string="Facility">
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button class="oe_stat_button" name="%(action_facilities_building)d" type="action" icon="fa-building">
                            <field name="building_count" widget="statinfo" string="Buildings"/>
                        </button>
                        </div>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Facility Name" required="True"/></h1>
                        <label for="code" class="oe_edit_only"/>
                        <h2><field name="code" placeholder="Facility Code" required="True" readonly="1"/></h2>
                    </div>

                    <group>
                        <group string="Basic Information">
                            <field name="manager_id" required="True"/>
                            <field name="property_type"/>
                            <field name="occupancy_status"/>
                        </group>
                        <group string="Location">
                            <field name="address"/>
                            <field name="city"/>
                            <field name="state_id"/>
                            <field name="zip_code"/>
                            <field name="country_id"/>
                        </group>
                    </group>

                    <notebook>
                        <page string="Detailed Info" name="detailed_info">
                            <group>
                                <group string="Building Dimensions">
                                    <field name="area_sqm"/>
                                    <field name="number_of_floors"/>
                                    <field name="year_built"/>
                                    <field name="last_renovation_date"/>
                                    <field name="capacity"/>
                                </group>
                                <group string="Geographical Coordinates">
                                    <field name="latitude"/>
                                    <field name="longitude"/>
                                    <field name="map_link" widget="url"/>
                                </group>
                            </group>
                        </page>

                        <page string="Contacts &amp; Access" name="contacts_access">
                            <group>
                                <group string="Contact Details">
                                    <field name="contact_person_id"/>
                                    <field name="phone"/>
                                    <field name="email"/>
                                </group>
                                <group string="Access Information">
                                    <field name="access_instructions"/>
                                </group>
                            </group>
                        </page>

                        <page string="Utilities &amp; Services" name="utilities_services">
                            <group>
                                <group string="Utility Meter IDs">
                                    <field name="electricity_meter_id"/>
                                    <field name="water_meter_id"/>
                                    <field name="gas_meter_id"/>
                                </group>
                                <group string="Other Services">
                                    <field name="internet_provider"/>
                                    <field name="security_system_type"/>
                                </group>
                            </group>
                        </page>

                        <page string="Compliance &amp; Documents" name="compliance_documents">
                            <group>
                                <group string="Compliance">
                                    <field name="permit_numbers"/>
                                    <field name="inspection_due_date"/>
                                </group>
                                <group string="Internal Notes">
                                    <field name="notes"/>
                                </group>
                            </group>
                            <separator string="Documents"/>
                            <field name="documents_ids" widget="many2many_binary" string="Attachments"/>
                        </page>

                        <page string="Buildings" name="facility_buildings_page">
                            <field name="building_ids">
                                <tree editable="bottom">
                                    <field name="name"/>
                                    <field name="code"/>
                                    <field name="building_type"/>
                                    <field name="number_of_floors"/>
                                    <field name="manager_id"/>
                                </tree>
                            </field>
                        </page>

                    </notebook>

                    <field name="active" groups="base.group_no_one"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <record id="action_facility" model="ir.actions.act_window">
        <field name="name">Facilities</field>
        <field name="res_model">facilities.facility</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create a new Facility/Property
            </p>
        </field>
    </record>

    <record id="view_facilities_facility_search" model="ir.ui.view">
        <field name="name">facilities.facility.search</field>
        <field name="model">facilities.facility</field>
        <field name="arch" type="xml">
            <search string="Facilities">
                <field name="name"/>
                <field name="code"/>
                <field name="manager_id"/>
                <field name="city"/>
                <field name="property_type"/>
                <field name="occupancy_status"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Facility Manager" name="groupby_facility_manager" context="{'group_by':'manager_id'}"/>
                    <filter string="Property Type" name="groupby_property_type" context="{'group_by':'property_type'}"/>
                    <filter string="Occupancy Status" name="groupby_occupancy_status" context="{'group_by':'occupancy_status'}"/>
                    <filter string="City" name="groupby_city" context="{'group_by':'city'}"/>
                </group>
            </search>
        </field>
    </record>

</odoo>

--- File: views/mobile_templates.xml ---
<!-- views/mobile_templates.xml -->
<odoo>
    <template id="mobile_workorder_view" inherit_id="web.assets_backend">
        <xpath expr="." position="inside">
            <link rel="stylesheet" href="/facilities_management/static/src/css/mobile.css"/>
        </xpath>
    </template>
</odoo>

--- File: views/asset_maintenance_scheduled_actions.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="ir_cron_maintenance_reminder" model="ir.cron">
        <field name="name">Maintenance Schedule Reminder</field>
        <field name="model_id" ref="facilities_management.model_asset_maintenance_schedule"/>
        <field name="state">code</field>
        <field name="code">
            model.send_maintenance_reminder()
        </field>
        <field name="user_id" ref="base.user_admin"/>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="numbercall">-1</field>  </record>

    <record id="action_asset_maintenance_scheduled_actions" model="ir.actions.act_window">
        <field name="name">Maintenance Scheduled Actions</field>
        <field name="res_model">ir.cron</field>
        <field name="view_mode">tree,form</field>
        <field name="domain">
            ['|', ('model_id.model', 'in', ['asset.maintenance.schedule', 'facilities.asset']), ('name', 'ilike', 'Maintenance')]
        </field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Manage your module's automated tasks
            </p><p>
                This view shows the scheduled actions (cron jobs) configured for maintenance.
            </p>
        </field>
    </record>

</odoo>

--- File: views/floor_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="view_facilities_floor_tree" model="ir.ui.view">
        <field name="name">facilities.floor.tree</field>
        <field name="model">facilities.floor</field>
        <field name="arch" type="xml">
            <tree decoration-muted="not active">
                <field name="name"/>
                <field name="code"/>
                <field name="level"/>
                <field name="building_id"/>
                <field name="facility_id"/>
                <field name="manager_id"/>
                <field name="active" invisible="1"/>
            </tree>
        </field>
    </record>

    <record id="view_facilities_floor_form" model="ir.ui.view">
        <field name="name">facilities.floor.form</field>
        <field name="model">facilities.floor</field>
        <field name="arch" type="xml">
            <form string="Floor">
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button class="oe_stat_button" name="%(action_facilities_room)d" type="action" icon="fa-cube">
                            <field name="room_count" widget="statinfo" string="Rooms"/>
                        </button>
                    </div>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Floor Number/Name" required="True"/></h1>
                        <label for="code" class="oe_edit_only"/>
                        <h2><field name="code" placeholder="Floor Code" required="True" readonly="1"/></h2>
                    </div>

                    <group>
                        <group string="Floor Details">
                            <field name="building_id" required="True"/>
                            <field name="facility_id" readonly="1"/>
                            <field name="manager_id"/>
                            <field name="level"/>
                            <field name="area_sqm"/>
                        </group>
                        <group string="Description">
                            <field name="description"/>
                            <field name="notes"/>
                        </group>
                    </group>

                    <notebook>
                        <page string="Rooms" name="rooms_page">
                            <field name="room_ids">
                                <tree editable="bottom">
                                    <field name="name"/>
                                    <field name="code"/>
                                    <field name="room_type"/>
                                    <field name="capacity"/>
                                    <field name="manager_id"/>
                                    <field name="active" invisible="1"/>
                                </tree>
                            </field>
                        </page>
                        </notebook>

                    <field name="active" groups="base.group_no_one"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <record id="view_facilities_floor_search" model="ir.ui.view">
        <field name="name">facilities.floor.search</field>
        <field name="model">facilities.floor</field>
        <field name="arch" type="xml">
            <search string="Floors">
                <field name="name"/>
                <field name="code"/>
                <field name="building_id"/>
                <field name="facility_id"/>
                <field name="manager_id"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Building" name="groupby_building" context="{'group_by':'building_id'}"/>
                    <filter string="Facility" name="groupby_facility" context="{'group_by':'facility_id'}"/>
                    <filter string="Manager" name="groupby_manager" context="{'group_by':'manager_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <record id="action_facilities_floor" model="ir.actions.act_window">
        <field name="name">Floors</field>
        <field name="res_model">facilities.floor</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create a new Floor
            </p>
        </field>
    </record>

</odoo>

--- File: views/asset_maintenance_calendar_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Simplified maintenance calendar view -->
    <record id="view_maintenance_schedule_calendar" model="ir.ui.view">
        <field name="name">asset.maintenance.schedule.calendar</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <calendar string="Maintenance Calendar"
                      date_start="next_maintenance_date"
                      color="maintenance_type">
                <field name="name"/>
                <field name="asset_id"/>
                <field name="maintenance_type"/>
                <field name="status"/>
                <field name="last_maintenance_date"/>
                <field name="interval_number"/>
                <field name="interval_type"/>
                <field name="job_plan_id"/>
                <field name="active"/>
                <field name="notes"/>
            </calendar>
        </field>
    </record>

    <!-- Maintenance Calendar with Last Maintenance Date -->
    <record id="view_maintenance_schedule_calendar_last" model="ir.ui.view">
        <field name="name">asset.maintenance.schedule.calendar.last</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <calendar string="Last Maintenance Calendar"
                      date_start="last_maintenance_date"
                      color="asset_id">
                <field name="name"/>
                <field name="asset_id"/>
                <field name="maintenance_type"/>
                <field name="status"/>
                <field name="next_maintenance_date"/>
                <field name="notes"/>
                <field name="interval_type"/>
                <field name="interval_number"/>
            </calendar>
        </field>
    </record>

    <!-- Enhanced maintenance calendar action -->
    <record id="action_maintenance_calendar_enhanced" model="ir.actions.act_window">
        <field name="name">Enhanced Maintenance Calendar</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="view_id" ref="view_maintenance_schedule_calendar"/>
        <field name="context">{"search_default_active": 1, "search_default_upcoming": 1}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Plan your asset maintenance schedules
            </p>
            <p>
                Organize and visualize maintenance tasks on a calendar with enhanced features.
                Color-coded by maintenance type for better organization.
            </p>
        </field>
    </record>

    <!-- Maintenance History Calendar Action -->
    <record id="action_maintenance_history_calendar" model="ir.actions.act_window">
        <field name="name">Maintenance History Calendar</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="view_id" ref="view_maintenance_schedule_calendar_last"/>
        <field name="domain">[("last_maintenance_date", "!=", False)]</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                View maintenance history
            </p>
            <p>
                Track completed maintenance activities and analyze patterns.
            </p>
        </field>
    </record>
</odoo>

--- File: views/asset_maintenance_schedule_views.xml ---
<odoo>
    <!-- Tree View for Asset Maintenance Schedule -->
    <record id="view_asset_maintenance_schedule_tree" model="ir.ui.view">
        <field name="name">asset.maintenance.schedule.tree</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
                <field name="asset_id"/>
                <field name="maintenance_type"/>
                <field name="interval_number"/>
                <field name="interval_type"/>
                <field name="last_maintenance_date"/>
                <field name="next_maintenance_date"/>
                <field name="active"/>
                <field name="job_plan_id"/>
                <!-- Add Action Button -->
                <button name="action_generate_work_order" type="object" string="Generate Work Order" class="btn-primary"/>
            </tree>
        </field>
    </record>

    <!-- Form View for Asset Maintenance Schedule -->
    <record id="view_asset_maintenance_schedule_form" model="ir.ui.view">
        <field name="name">asset.maintenance.schedule.form</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <form string="Asset Maintenance Schedule" readonly="active">
                <header>
                    <button name="toggle_active" type="object" string="Deactivate"
                            invisible="not active"
                            help="Deactivate the schedule. It will no longer appear in default lists."/>
                    <button name="toggle_active" type="object" string="Activate"
                            invisible="active"
                            class="oe_highlight"
                            help="Activate the schedule. It will appear in default lists."/>
                    <!-- Add Button -->
                    <button name="action_generate_work_order" type="object" string="Generate Work Order" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <group>
                            <field name="name"/>
                            <field name="asset_id"/>
                            <field name="maintenance_type"/>
                            <field name="job_plan_id"/>
                        </group>
                        <group>
                            <field name="last_maintenance_date"/>
                            <field name="next_maintenance_date"/>
                            <field name="interval_number"/>
                            <field name="interval_type"/>
                        </group>
                    </group>
                    <notebook>
                        <page string="Notes">
                            <field name="notes"/>
                        </page>
                    </notebook>
                    <field name="active" invisible="1"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <!-- Calendar View for Asset Maintenance Schedule -->
    <record id="view_asset_maintenance_schedule_calendar" model="ir.ui.view">
        <field name="name">asset.maintenance.schedule.calendar</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <calendar string="Maintenance Schedule Calendar" date_start="next_maintenance_date" mode="month" color="asset_id">
                <field name="name"/>
                <field name="asset_id"/>
                <field name="maintenance_type"/>
            </calendar>
        </field>
    </record>

    <!-- Action for Asset Maintenance Schedule -->
    <record id="action_asset_maintenance_schedule" model="ir.actions.act_window">
        <field name="name">Maintenance Schedules</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">tree,form,calendar</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create a new Asset Maintenance Schedule
            </p><p>
                Define recurring maintenance tasks for your assets based on intervals.
            </p>
        </field>
    </record>
</odoo>

--- File: views/asset_dashboard_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <data>
        <!-- Dashboard Kanban View -->
        <record id="view_asset_kanban_dashboard" model="ir.ui.view">
            <field name="name">Asset Dashboard Kanban</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <kanban class="o_kanban_dashboard" sample="1">
                    <field name="name"/>
                    <field name="asset_code"/>
                    <field name="category_id"/>
                    <field name="state"/>
                    <field name="condition"/>
                    <field name="purchase_value"/>
                    <field name="current_value"/>
                    <field name="warranty_status"/>
                    <field name="responsible_id"/>
                    <field name="image_1920"/>
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_card oe_kanban_global_click">
                                <div class="o_kanban_image">
                                    <img t-att-src="kanban_image('facilities.asset', 'image_1920', record.id.raw_value)"
                                         alt="Asset Image" class="o_image_64_cover"/>
                                </div>
                                <div class="oe_kanban_details">
                                    <div class="o_kanban_record_top">
                                        <div class="o_kanban_record_headings">
                                            <strong class="o_kanban_record_title">
                                                <field name="name"/>
                                            </strong>
                                            <br/>
                                            <small class="text-muted">
                                                Code: <field name="asset_code"/>
                                            </small>
                                        </div>
                                        <div class="o_kanban_record_top_right">
                                            <span t-att-class="'badge badge-pill ' + (record.state.raw_value == 'active' ? 'badge-success' :
                                                              record.state.raw_value == 'maintenance' ? 'badge-warning' :
                                                              record.state.raw_value == 'disposed' ? 'badge-danger' : 'badge-secondary')">
                                                <field name="state"/>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="o_kanban_record_body">
                                        <div class="row">
                                            <div class="col-6">
                                                <strong>Category:</strong><br/>
                                                <field name="category_id"/>
                                            </div>
                                            <div class="col-6">
                                                <strong>Condition:</strong><br/>
                                                <span t-att-class="'badge ' + (record.condition.raw_value == 'new' ? 'badge-success' :
                                                                  record.condition.raw_value == 'good' ? 'badge-info' :
                                                                  record.condition.raw_value == 'fair' ? 'badge-warning' : 'badge-danger')">
                                                    <field name="condition"/>
                                                </span>
                                            </div>
                                        </div>
                                        <div class="row mt-2">
                                            <div class="col-6">
                                                <strong>Purchase Value:</strong><br/>
                                                <field name="purchase_value" widget="monetary"/>
                                            </div>
                                            <div class="col-6">
                                                <strong>Current Value:</strong><br/>
                                                <field name="current_value" widget="monetary"/>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="o_kanban_record_bottom">
                                        <div class="oe_kanban_bottom_left">
                                            <span t-att-class="'badge ' + (record.warranty_status.raw_value == 'valid' ? 'badge-success' :
                                                              record.warranty_status.raw_value == 'expired' ? 'badge-danger' : 'badge-secondary')">
                                                Warranty: <field name="warranty_status"/>
                                            </span>
                                        </div>
                                        <div class="oe_kanban_bottom_right">
                                            <field name="responsible_id" widget="many2one_avatar_user"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </t>
                    </templates>
                </kanban>
            </field>
        </record>

        <!-- Main Dashboard Action -->
        <record id="action_asset_dashboard" model="ir.actions.act_window">
            <field name="name">Asset Dashboard</field>
            <field name="res_model">facilities.asset</field>
            <field name="view_mode">kanban,graph,pivot,tree</field>
            <field name="view_id" ref="view_asset_kanban_dashboard"/>
            <field name="context">{
                'search_default_group_by_category': 1,
                'search_default_filter_active': 1
            }</field>
            <field name="help" type="html">
                <p class="o_view_nocontent_smiling_face">
                    Welcome to the Asset Dashboard!
                </p>
                <p>
                    Track and manage your facility assets with comprehensive insights:
                    <br/>• Asset value tracking
                    <br/>• Warranty monitoring
                    <br/>• Condition management
                    <br/>• Maintenance scheduling
                </p>
            </field>
        </record>

        <!-- Secondary Actions for specific views -->
        <record id="action_asset_value_analysis" model="ir.actions.act_window">
            <field name="name">Asset Value Analysis</field>
            <field name="res_model">facilities.asset</field>
            <field name="view_mode">graph,pivot</field>
            <field name="context">{
                'search_default_group_by_category': 1
            }</field>
        </record>

        <record id="action_warranty_overview" model="ir.actions.act_window">
            <field name="name">Warranty Overview</field>
            <field name="res_model">facilities.asset</field>
            <field name="view_mode">kanban,tree</field>
            <field name="context">{
                'search_default_group_by_warranty': 1
            }</field>
            <field name="domain">[('warranty_expiration_date', '!=', False)]</field>
        </record>

        <!-- State-based Actions -->
        <record id="action_assets_by_state" model="ir.actions.act_window">
            <field name="name">Assets by State</field>
            <field name="res_model">facilities.asset</field>
            <field name="view_mode">kanban,tree</field>
            <field name="context">{
                'search_default_group_by_state': 1
            }</field>
        </record>

        <record id="action_maintenance_due" model="ir.actions.act_window">
            <field name="name">Maintenance Due</field>
            <field name="res_model">facilities.asset</field>
            <field name="view_mode">tree,kanban</field>
            <field name="domain">[('maintenance_due', '=', True)]</field>
        </record>

        <!-- Alternative Graph Views for different analyses -->
        <record id="view_asset_graph_by_state" model="ir.ui.view">
            <field name="name">Asset Graph by State</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <graph type="pie" sample="1">
                    <field name="state" type="row"/>
                </graph>
            </field>
        </record>

        <record id="view_asset_graph_value" model="ir.ui.view">
            <field name="name">Asset Value Graph</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <graph type="bar" sample="1">
                    <field name="category_id" type="row"/>
                    <field name="purchase_value" type="measure"/>
                    <field name="current_value" type="measure"/>
                </graph>
            </field>
        </record>

        <!-- Simple Tree View for List Mode -->
        <record id="view_asset_tree" model="ir.ui.view">
            <field name="name">Asset Tree</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <tree sample="1">
                    <field name="name"/>
                    <field name="asset_code"/>
                    <field name="category_id"/>
                    <field name="state"/>
                    <field name="condition"/>
                    <field name="purchase_value"/>
                    <field name="current_value"/>
                    <field name="warranty_status"/>
                    <field name="responsible_id"/>
                </tree>
            </field>
        </record>

        <!-- Pivot View for Analysis -->
        <record id="view_asset_pivot" model="ir.ui.view">
            <field name="name">Asset Pivot Analysis</field>
            <field name="model">facilities.asset</field>
            <field name="arch" type="xml">
                <pivot sample="1">
                    <field name="category_id" type="row"/>
                    <field name="state" type="col"/>
                    <field name="purchase_value" type="measure"/>
                    <field name="current_value" type="measure"/>
                </pivot>
            </field>
        </record>
    </data>
</odoo>

--- File: views/maintenance_report_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="action_maintenance_reports" model="ir.actions.act_window">
        <field name="name">Maintenance Reports</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">pivot,graph</field>
        <field name="views" eval="[(False, 'pivot'), (False, 'graph')]"/>
    </record>

    <record id="view_maintenance_pivot" model="ir.ui.view">
        <field name="name">maintenance.pivot</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="asset_id" type="row"/>
                <field name="maintenance_type" type="col"/>
                <field name="active" type="col"/> </pivot>
        </field>
    </record>

    <record id="view_maintenance_graph" model="ir.ui.view">
        <field name="name">maintenance.graph</field>
        <field name="model">asset.maintenance.schedule</field>
        <field name="arch" type="xml">
            <graph type="bar">
                <field name="asset_id"/>
                <field name="maintenance_type"/>
                </graph>
        </field>
    </record>
</odoo>

--- File: views/email_templates.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Email Template for Maintenance Reminder -->
    <record id="email_template_maintenance_reminder" model="mail.template">
        <field name="name">Maintenance Reminder</field>
        <field name="model_id" ref="model_asset_maintenance_schedule"/>
        <field name="subject">Reminder: Upcoming Maintenance for Asset</field>
        <field name="body_html">
            <![CDATA[
            <p>Dear User,</p>
            <p>This is a reminder that the maintenance for the asset <strong>${object.asset_id.name}</strong> is scheduled for <strong>${object.maintenance_date}</strong>.</p>
            <p>Please ensure that the maintenance is completed on time.</p>
            <p>Best Regards,<br/>Facility Management Team</p>
            ]]>
        </field>
    </record>
</odoo>


--- File: views/facility_asset_menus.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Enhanced Asset Action with better view modes -->
    <record id="action_asset" model="ir.actions.act_window">
        <field name="name">Assets</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,tree,form,calendar</field>
        <field name="context">{
            'search_default_filter_active': 1
            }
        </field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first facility asset!
            </p>
            <p>
                Manage your facility assets including equipment, furniture, and infrastructure.
            </p>
        </field>
    </record>

    <!-- Facilities Action -->
    <record id="action_facility" model="ir.actions.act_window">
        <field name="name">Facilities</field>
        <field name="res_model">facilities.facility</field>
        <field name="view_mode">kanban,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first facility!
            </p>
            <p>
                Manage your facilities and their properties.
            </p>
        </field>
    </record>

    <!-- Asset Categories Action -->
    <record id="action_asset_category" model="ir.actions.act_window">
        <field name="name">Asset Categories</field>
        <field name="res_model">facilities.asset.category</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first asset category!
            </p>
            <p>
                Organize your assets by creating categories.
            </p>
        </field>
    </record>

    <!-- Maintenance Schedule Action -->
    <record id="action_maintenance_schedule" model="ir.actions.act_window">
        <field name="name">Maintenance Schedules</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first maintenance schedule!
            </p>
            <p>
                Schedule maintenance activities for your assets.
            </p>
        </field>
    </record>

    <!-- Maintenance Work Orders Action -->
    <record id="action_maintenance_workorder" model="ir.actions.act_window">
        <field name="name">Maintenance Work Orders</field>
        <field name="res_model">maintenance.workorder</field>
        <field name="view_mode">kanban,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first work order!
            </p>
            <p>
                Manage maintenance work orders and track their progress.
            </p>
        </field>
    </record>

    <!-- Enhanced Dashboard Actions -->
    <record id="action_asset_overview" model="ir.actions.act_window">
        <field name="name">Asset Overview</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,graph,pivot</field>
        <field name="context">{
            'search_default_group_by_category': 1,
            'search_default_filter_active': 1
            }
        </field>
    </record>

    <record id="action_assets_by_state" model="ir.actions.act_window">
        <field name="name">Assets by State</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,tree</field>
        <field name="context">{
            'search_default_group_by_condition': 1
            }
        </field>
    </record>

    <record id="action_warranty_monitoring" model="ir.actions.act_window">
        <field name="name">Warranty Monitoring</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">calendar,tree,kanban</field>
        <field name="view_id" ref="view_facilities_asset_calendar_warranty"/>
        <field name="context">{
            'search_default_has_warranty': 1
            }
        </field>
        <field name="domain">[('warranty_expiration_date', '!=', False)]</field>
    </record>

    <record id="action_maintenance_due" model="ir.actions.act_window">
        <field name="name">Maintenance Due</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">tree,kanban</field>
        <field name="domain">[('maintenance_due', '=', True)]</field>
    </record>

    <!-- Buildings Action -->
    <record id="action_facilities_building" model="ir.actions.act_window">
        <field name="name">Buildings</field>
        <field name="res_model">facilities.building</field>
        <field name="view_mode">kanban,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first building!
            </p>
            <p>
                Manage your facility buildings and their properties.
            </p>
        </field>
    </record>

    <!-- Floors Action -->
    <record id="action_facilities_floor" model="ir.actions.act_window">
        <field name="name">Floors</field>
        <field name="res_model">facilities.floor</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first floor!
            </p>
            <p>
                Manage floors within your buildings.
            </p>
        </field>
    </record>

    <!-- Rooms Action -->
    <record id="action_facilities_room" model="ir.actions.act_window">
        <field name="name">Rooms</field>
        <field name="res_model">facilities.room</field>
        <field name="view_mode">kanban,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first room!
            </p>
            <p>
                Manage rooms within your floors and buildings.
            </p>
        </field>
    </record>

    <!-- Asset Dashboard Action -->
    <record id="action_asset_dashboard" model="ir.actions.act_window">
        <field name="name">Asset Dashboard</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,graph,pivot</field>
        <field name="context">{
            'search_default_filter_active': 1
            }
        </field>
    </record>

    <!-- Asset Value Analysis Action -->
    <record id="action_asset_value_analysis" model="ir.actions.act_window">
        <field name="name">Asset Value Analysis</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="context">{
            'search_default_group_by_category': 1,
            'search_default_filter_active': 1
            }
        </field>
    </record>

    <!-- Maintenance Calendar Action -->
    <record id="action_maintenance_calendar" model="ir.actions.act_window">
        <field name="name">Maintenance Calendar</field>
        <field name="res_model">asset.maintenance.schedule</field>
        <field name="view_mode">calendar,tree,form</field>
    </record>

    <!-- Scheduled Maintenance Actions -->
    <record id="action_asset_maintenance_scheduled_actions" model="ir.actions.act_window">
        <field name="name">Scheduled Maintenance Actions</field>
        <field name="res_model">ir.cron</field>
        <field name="view_mode">tree,form</field>
        <field name="domain">[('name', 'ilike', 'maintenance')]</field>
    </record>

    <!-- Maintenance Reports Action -->
    <record id="action_maintenance_reports" model="ir.actions.act_window">
        <field name="name">Maintenance Reports</field>
        <field name="res_model">maintenance.workorder</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="context">{
            'search_default_group_by_state': 1
            }
        </field>
    </record>

    <!-- Asset Reports Actions -->
    <record id="action_asset_reports" model="ir.actions.act_window">
        <field name="name">Asset Reports</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="context">{
            'search_default_group_by_category': 1
            }
        </field>
    </record>

    <!-- Facility Reports Action -->
    <record id="action_facility_reports" model="ir.actions.act_window">
        <field name="name">Facility Reports</field>
        <field name="res_model">facilities.facility</field>
        <field name="view_mode">graph,pivot,tree</field>
    </record>

    <!-- SLA Analytics Action -->
    <record id="action_maintenance_sla_analytics" model="ir.actions.act_window">
        <field name="name">SLA Analytics</field>
        <field name="res_model">maintenance.sla.analytics</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No SLA data available!
            </p>
            <p>
                SLA analytics will appear here once you have maintenance work orders with SLA tracking.
            </p>
        </field>
    </record>

    <!-- Resource Utilization Action -->
    <record id="action_maintenance_resource_utilization" model="ir.actions.act_window">
        <field name="name">Resource Utilization</field>
        <field name="res_model">maintenance.resource.utilization</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Track resource utilization!
            </p>
            <p>
                Monitor how your maintenance resources are being utilized.
            </p>
        </field>
    </record>

    <!-- Predictive Maintenance Action -->
    <record id="action_predictive_maintenance" model="ir.actions.act_window">
        <field name="name">Predictive Maintenance</field>
        <field name="res_model">predictive.maintenance</field>
        <field name="view_mode">kanban,tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Set up predictive maintenance!
            </p>
            <p>
                Configure predictive maintenance rules for your assets.
            </p>
        </field>
    </record>

    <!-- Job Plans Action -->
    <record id="action_maintenance_job_plan" model="ir.actions.act_window">
        <field name="name">Job Plans</field>
        <field name="res_model">maintenance.job.plan</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first job plan!
            </p>
            <p>
                Define standardized maintenance procedures and tasks.
            </p>
        </field>
    </record>

        <record id="action_asset_performance_dashboard" model="ir.actions.act_window">
        <field name="name">Performance Dashboard</field>
        <field name="res_model">facilities.asset.performance</field>
        <field name="view_mode">graph,pivot,tree</field>
        <field name="context">{
            'search_default_last_30_days': 1,
            'search_default_group_by_asset': 1
            }
        </field>
    </record>

    <record id="action_asset" model="ir.actions.act_window">
        <field name="name">Assets</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,tree,form,calendar</field>
        <field name="context">{
            'search_default_active': 1
            }
        </field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first facility asset!
            </p>
            <p>
                Manage your facility assets including equipment, furniture, and infrastructure.
                Use calendar view to track important dates.
            </p>
        </field>
    </record>

    <record id="action_assets_overview" model="ir.actions.act_window">
        <field name="name">Assets Overview</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">kanban,graph,pivot,calendar</field>
        <field name="context">{
            'search_default_group_by_category': 1,
            'search_default_filter_active': 1
            }
        </field>
    </record>

    <record id="action_warranty_monitoring" model="ir.actions.act_window">
        <field name="name">Warranty Monitoring</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">calendar,tree,kanban</field>
        <field name="view_id" ref="view_facilities_asset_calendar_warranty"/>
        <field name="context">{
            'search_default_has_warranty': 1
            }
        </field>
        <field name="domain">[('warranty_expiration_date', '!=', False)]</field>
    </record>

    <!-- ROOT MENU -->
    <menuitem id="menu_facilities_root"
              name="Facility Management"
              sequence="10"
              web_icon="facilities_management,static/description/icon.png"/>

    <!-- FACILITIES SECTION -->
    <menuitem id="menu_facility_records"
              name="Facilities"
              parent="menu_facilities_root"
              sequence="10"/>

    <menuitem id="menu_facility_list_item"
              name="All Facilities"
              parent="menu_facility_records"
              action="action_facility"
              sequence="5"/>

    <menuitem id="menu_buildings_item"
              name="Buildings"
              parent="menu_facility_records"
              action="action_facilities_building"
              sequence="10"/>

    <menuitem id="menu_floors_item"
              name="Floors"
              parent="menu_facility_records"
              action="action_facilities_floor"
              sequence="20"/>

    <menuitem id="menu_rooms_item"
              name="Rooms"
              parent="menu_facility_records"
              action="action_facilities_room"
              sequence="30"/>

    <!-- ENHANCED ASSET MANAGEMENT SECTION -->
    <menuitem id="menu_asset_management"
              name="Asset Management"
              parent="menu_facilities_root"
              sequence="15"/>

    <!-- Asset Operations -->
    <menuitem id="menu_asset_operations"
              name="Operations"
              parent="menu_asset_management"
              sequence="5"/>

    <menuitem id="menu_asset_list"
              name="All Assets"
              parent="menu_asset_operations"
              action="action_asset"
              sequence="10"/>

    <menuitem id="menu_asset_categories"
              name="Categories"
              parent="menu_asset_operations"
              action="action_asset_category"
              sequence="20"/>

    <!-- Asset Analytics & Dashboards -->
    <menuitem id="menu_asset_analytics"
              name="Analytics &amp; Dashboards"
              parent="menu_asset_management"
              sequence="10"/>

    <menuitem id="menu_asset_dashboard_item"
              name="Main Dashboard"
              parent="menu_asset_analytics"
              action="action_asset_dashboard"
              sequence="10"/>

    <menuitem id="menu_asset_overview_item"
              name="Asset Overview"
              parent="menu_asset_analytics"
              action="action_asset_overview"
              sequence="20"/>

    <menuitem id="menu_asset_value_analysis_item"
              name="Value Analysis"
              parent="menu_asset_analytics"
              action="action_asset_value_analysis"
              sequence="30"/>

    <menuitem id="menu_assets_by_state_item"
              name="Assets by Condition"
              parent="menu_asset_analytics"
              action="action_assets_by_state"
              sequence="40"/>

    <!-- Asset Monitoring -->
    <menuitem id="menu_asset_monitoring"
              name="Monitoring"
              parent="menu_asset_management"
              sequence="15"/>

    <menuitem id="menu_warranty_monitoring_item"
              name="Warranty Status"
              parent="menu_asset_monitoring"
              action="action_warranty_monitoring"
              sequence="10"/>

    <menuitem id="menu_maintenance_due_item"
              name="Maintenance Due"
              parent="menu_asset_monitoring"
              action="action_maintenance_due"
              sequence="20"/>

    <menuitem id="menu_predictive_maintenance_item"
              name="Predictive Maintenance"
              parent="menu_asset_monitoring"
              action="action_predictive_maintenance"
              sequence="30"/>

    <!-- MAINTENANCE SECTION -->
    <menuitem id="menu_maintenance"
              name="Maintenance"
              parent="menu_facilities_root"
              sequence="20"/>

    <!-- Maintenance Operations -->
    <menuitem id="menu_maintenance_operations"
              name="Operations"
              parent="menu_maintenance"
              sequence="5"/>

    <menuitem id="menu_maintenance_workorders"
              name="Work Orders"
              parent="menu_maintenance_operations"
              action="action_maintenance_workorder"
              sequence="10"/>

    <menuitem id="menu_maintenance_schedule"
              name="Schedules"
              parent="menu_maintenance_operations"
              action="action_maintenance_schedule"
              sequence="20"/>

    <menuitem id="menu_maintenance_calendar_item"
              name="Calendar View"
              parent="menu_maintenance_operations"
              action="action_maintenance_calendar"
              sequence="30"/>

    <!-- Maintenance Planning -->
    <menuitem id="menu_maintenance_planning"
              name="Planning"
              parent="menu_maintenance"
              sequence="10"/>

    <menuitem id="menu_maintenance_job_plan_item"
              name="Job Plans"
              parent="menu_maintenance_planning"
              action="action_maintenance_job_plan"
              sequence="10"/>

    <!-- Maintenance Analytics -->
    <menuitem id="menu_maintenance_analytics"
              name="Analytics"
              parent="menu_maintenance"
              sequence="15"/>

    <menuitem id="menu_maintenance_reports_item"
              name="Performance Reports"
              parent="menu_maintenance_analytics"
              action="action_maintenance_reports"
              sequence="10"/>

    <menuitem id="menu_maintenance_sla_analytics_item"
              name="SLA Analytics"
              parent="menu_maintenance_analytics"
              action="action_maintenance_sla_analytics"
              sequence="20"/>

    <menuitem id="menu_maintenance_resource_utilization_item"
              name="Resource Utilization"
              parent="menu_maintenance_analytics"
              action="action_maintenance_resource_utilization"
              sequence="30"/>

    <!-- Maintenance Administration -->
    <menuitem id="menu_maintenance_admin"
              name="Administration"
              parent="menu_maintenance"
              sequence="90"
              groups="base.group_system"/>

    <menuitem id="menu_scheduled_maintenance_actions"
              name="Scheduled Actions"
              parent="menu_maintenance_admin"
              action="action_asset_maintenance_scheduled_actions"
              sequence="10"
              groups="base.group_system"/>

    <!-- REPORTING SECTION -->
    <menuitem id="menu_facilities_reports"
              name="Reports"
              parent="menu_facilities_root"
              sequence="80"/>

    <menuitem id="menu_asset_reports"
              name="Asset Reports"
              parent="menu_facilities_reports"
              action="action_asset_reports"
              sequence="10"/>

    <menuitem id="menu_maintenance_reports"
              name="Maintenance Reports"
              parent="menu_facilities_reports"
              action="action_maintenance_reports"
              sequence="20"/>

    <menuitem id="menu_facility_reports"
              name="Facility Reports"
              parent="menu_facilities_reports"
              action="action_facility_reports"
              sequence="30"/>

    <!-- CONFIGURATION SECTION -->
    <menuitem id="menu_facilities_config"
              name="Configuration"
              parent="menu_facilities_root"
              sequence="99"
              groups="base.group_system"/>

    <menuitem id="menu_asset_config"
              name="Asset Settings"
              parent="menu_facilities_config"
              sequence="10"
              groups="base.group_system"/>

    <menuitem id="menu_maintenance_config"
              name="Maintenance Settings"
              parent="menu_facilities_config"
              sequence="20"
              groups="base.group_system"/>
    <menuitem id="menu_asset_performance_item"
              name="Performance Tracking"
              parent="menu_asset_monitoring"
              action="action_asset_performance"
              sequence="25"/>

    <menuitem id="menu_asset_performance_dashboard_item"
              name="Performance Dashboard"
              parent="menu_asset_analytics"
              action="action_asset_performance_dashboard"
              sequence="45"/>

    <!-- Add to Configuration section -->
    <menuitem id="menu_asset_downtime_reasons_item"
              name="Downtime Reasons"
              parent="menu_asset_config"
              action="action_asset_downtime_reasons"
              sequence="15"
              groups="base.group_system"/>

    <menuitem id="menu_asset_calendar_views"
              name="Calendar Views"
              parent="menu_asset_analytics"
              sequence="50"/>

    <menuitem id="menu_warranty_calendar_item"
              name="Warranty Calendar"
              parent="menu_asset_calendar_views"
              action="action_asset_warranty_calendar"
              sequence="10"/>

    <menuitem id="menu_purchase_timeline_item" name="Purchase Timeline" parent="menu_asset_calendar_views"
              action="action_asset_purchase_calendar" sequence="20"/>

    <menuitem id="menu_maintenance_permits"
              name="Permits"
              parent="menu_maintenance"
              sequence="40"/>

    <menuitem id="menu_workorder_permit"
              name="Work Order Permits"
              parent="menu_maintenance_permits"
              action="action_workorder_permit"
              sequence="10"/>


</odoo>

--- File: views/__init__.py ---


--- File: views/building_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="view_facilities_building_tree" model="ir.ui.view">
        <field name="name">facilities.building.tree</field>
        <field name="model">facilities.building</field>
        <field name="arch" type="xml">
            <tree decoration-muted="not active">
                <field name="name"/>
                <field name="code"/>
                <field name="facility_id"/>
                <field name="building_type"/>
                <field name="number_of_floors"/>
                <field name="manager_id"/>
                <field name="active" invisible="1"/>
            </tree>
        </field>
    </record>

    <record id="view_facilities_building_form" model="ir.ui.view">
        <field name="name">facilities.building.form</field>
        <field name="model">facilities.building</field>
        <field name="arch" type="xml">
            <form string="Building">
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button class="oe_stat_button" name="%(action_facilities_floor)d" type="action" icon="fa-th-large">
                            <field name="floor_count" widget="statinfo" string="Floors"/>
                        </button>
                        </div>
                    <div class="oe_right">
                        <field name="image" widget="image" class="oe_avatar" options="{'preview_image': 'image'}"/>
                    </div>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Building Name" required="True"/></h1>
                        <label for="code" class="oe_edit_only"/>
                        <h2><field name="code" placeholder="Building Code" required="True" readonly="1"/></h2>
                    </div>

                    <group>
                        <group string="Building Details">
                            <field name="facility_id" required="True"/>
                            <field name="manager_id"/>
                            <field name="building_type"/>
                            <field name="number_of_floors"/>
                            <field name="total_area_sqm"/>
                        </group>
                        <group string="Location &amp; Construction">
                            <field name="address"/>
                            <field name="year_constructed"/>
                        </group>
                    </group>

                    <notebook>
                        <page string="Description" name="description_page">
                            <field name="description"/>
                        </page>
                        <page string="Floors" name="floors_page">
                            <field name="floor_ids">
                                <tree editable="bottom">
                                    <field name="name"/>
                                    <field name="code"/>
                                    <field name="level"/>
                                    <field name="manager_id"/>
                                    <field name="active" invisible="1"/>
                                </tree>
                            </field>
                        </page>
                        </notebook>

                    <field name="active" groups="base.group_no_one"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <record id="view_facilities_building_search" model="ir.ui.view">
        <field name="name">facilities.building.search</field>
        <field name="model">facilities.building</field>
        <field name="arch" type="xml">
            <search string="Buildings">
                <field name="name"/>
                <field name="code"/>
                <field name="facility_id"/>
                <field name="manager_id"/>
                <field name="building_type"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Facility" name="groupby_facility" context="{'group_by':'facility_id'}"/>
                    <filter string="Building Type" name="groupby_building_type" context="{'group_by':'building_type'}"/>
                    <filter string="Manager" name="groupby_manager" context="{'group_by':'manager_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <record id="action_facilities_building" model="ir.actions.act_window">
        <field name="name">Buildings</field>
        <field name="res_model">facilities.building</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create a new Building
            </p>
        </field>
    </record>

</odoo>

--- File: views/maintenance_workorder_permit_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Permit Tree View -->
    <record id="view_workorder_permit_tree" model="ir.ui.view">
        <field name="name">maintenance.workorder.permit.tree</field>
        <field name="model">maintenance.workorder.permit</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
                <field name="permit_type"/>
                <field name="status"/>
                <field name="issued_date"/>
                <field name="expiry_date"/>
                <field name="requested_by_id"/>
                <field name="approved_by_id"/>
                <field name="workorder_id"/>
            </tree>
        </field>
    </record>

    <!-- Permit Action Window -->
    <record id="action_workorder_permit" model="ir.actions.act_window">
        <field name="name">Work Order Permits</field>
        <field name="res_model">maintenance.workorder.permit</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p>
                Manage and track permits required for work orders.
            </p>
        </field>
    </record>

    <!-- Permit Form View (Odoo 17 syntax, with statusbar, workflow buttons, and chatter) -->
    <record id="view_workorder_permit_form" model="ir.ui.view">
        <field name="name">maintenance.workorder.permit.form</field>
        <field name="model">maintenance.workorder.permit</field>
        <field name="arch" type="xml">
            <form string="Work Order Permit">
                <header>
                    <field name="status" widget="statusbar"
                        statusbar_visible="requested,pending_manager_approval,approved,rejected,expired"
                        statusbar_colors='{"approved":"green","rejected":"red"}'/>

                    <button name="action_submit_for_approval"
                            type="object"
                            string="Send to Facility Manager"
                            class="oe_highlight"
                            show="status == 'requested'"/>

                    <button name="action_approve"
                            type="object"
                            string="Approve"
                            class="btn-primary"
                            show="status == 'pending_manager_approval' and facility_manager_id == uid"/>

                    <button name="action_reject"
                            type="object"
                            string="Reject"
                            class="btn-danger"
                            show="status == 'pending_manager_approval' and facility_manager_id == uid"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="permit_type"/>
                        <field name="workorder_id"/>
                        <field name="status"/>
                        <field name="issued_date"/>
                        <field name="expiry_date"/>
                        <field name="requested_by_id"/>
                        <field name="approved_by_id"/>
                        <!-- Do NOT use required here; enforce in Python only -->
                        <field name="rejected_reason"
                               placeholder="Provide rejection reason if rejecting"/>
                        <field name="facility_manager_id" readonly="1"/>
                        <field name="notes"/>
                        <field name="attachment_ids" widget="many2many_binary"/>
                    </group>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>
</odoo>

--- File: views/maintenance_workorder_part_line_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <record id="view_maintenance_workorder_part_line_tree" model="ir.ui.view">
            <field name="name">maintenance.workorder.part_line.tree</field>
            <field name="model">maintenance.workorder.part_line</field>
            <field name="arch" type="xml">
                <tree editable="bottom">
                    <field name="product_id" />
                    <field name="quantity" />
                    <field name="uom_id" />
                    <field name="product_qty_in_hand" />
                    <field name="notes" />
                </tree>
            </field>
        </record>

        <record id="view_maintenance_workorder_part_line_form" model="ir.ui.view">
            <field name="name">maintenance.workorder.part_line.form</field>
            <field name="model">maintenance.workorder.part_line</field>
            <field name="arch" type="xml">
                <form>
                    <group>
                        <field name="workorder_id" />
                        <field name="product_id" />
                        <field name="quantity" />
                        <field name="uom_id" />
                        <field name="product_qty_in_hand" />
                        <field name="notes" />
                    </group>
                </form>
            </field>
        </record>

    </data>
</odoo>

--- File: views/maintenance_workorder_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Workorder Form View -->
    <record id="view_workorder_form" model="ir.ui.view">
        <field name="name">maintenance.workorder.form</field>
        <field name="model">maintenance.workorder</field>
        <field name="arch" type="xml">
            <form>
                <header>
                    <field name="approval_state" widget="statusbar"
                        statusbar_visible="draft,submitted,supervisor,manager,approved,in_progress,done,refused,escalated"
                        statusbar_colors='{"refused":"red","escalated":"orange","done":"green"}'/>
                    <field name="status" invisible="1"/>
                    <field name="all_tasks_completed" invisible="1"/>
                    <button name="action_submit_for_approval" type="object"
                        string="Submit for Approval" class="oe_highlight"
                        invisible="approval_state != 'draft'"/>
                    <button name="action_supervisor_approve" type="object"
                        string="Supervisor Approve" class="oe_highlight"
                        invisible="approval_state != 'submitted'"/>
                    <button name="action_manager_approve" type="object"
                        string="Manager Approve" class="oe_highlight"
                        invisible="approval_state != 'supervisor'"/>
                    <button name="action_fully_approve" type="object"
                        string="Fully Approve" class="oe_highlight"
                        invisible="approval_state != 'manager'"/>
                    <button name="action_refuse" type="object"
                        string="Refuse" class="btn-danger"
                        invisible="approval_state == 'refused' or approval_state == 'done' or approval_state == 'cancelled'"/>
                    <button name="action_start_progress" type="object" string="Start Progress"
                        invisible="approval_state != 'approved'" class="oe_highlight"/>
                    <button name="action_complete" type="object" string="Mark as Completed"
                        invisible="status != 'in_progress' or not all_tasks_completed"
                        class="oe_highlight"
                        confirm="Are you sure you want to mark this Work Order as completed? Not all tasks might be checked."/>
                    <button name="action_cancel" type="object" string="Cancel"
                        invisible="status == 'done' or status == 'cancelled'"/>
                    <button name="action_reset_to_draft" type="object" string="Reset to Draft"
                        invisible="status == 'draft'"
                        confirm="Are you sure you want to reset this work order to draft state? This action cannot be undone easily."/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button class="oe_stat_button" name="action_view_picking" type="object" icon="fa-truck"
                            invisible="picking_count == 0">
                            <field name="picking_count" widget="statinfo" string="Parts Transfers"/>
                        </button>
                    </div>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Work Order Reference"/></h1>
                    </div>
                    <group>
                        <group string="Work Order Details">
                            <field name="asset_id" options="{'no_create': True}"/>
                            <field name="facility_id" readonly="1"/>
                            <field name="room_id" readonly="1"/>
                            <field name="building_id" readonly="1"/>
                            <field name="floor_id" readonly="1"/>
                            <field name="work_order_type"/>
                            <field name="priority"/>
                            <field name="schedule_id"
                                domain="[('active','=',True), ('asset_id','=',asset_id)]"
                                context="{'default_asset_id': asset_id}"/>
                            <field name="job_plan_id"
                                invisible="workorder_task_ids != False"
                                readonly="status != 'draft'"
                                help="Select a Job Plan to automatically populate tasks for this work order."/>
                            <field name="service_type"/>
                            <field name="maintenance_team_id"/>
                        </group>
                        <group string="Personnel &amp; Scheduled Dates">
                            <field name="technician_id"/>
                            <field name="supervisor_id" readonly="1"/>
                            <field name="manager_id" readonly="1"/>
                            <field name="start_date"/>
                            <field name="end_date"/>
                        </group>
                    </group>
                    <group string="Approval Details" colspan="2">
                        <field name="submitted_by_id" readonly="1"/>
                        <field name="approved_by_id" readonly="1"/>
                        <field name="approval_request_date" readonly="1"/>
                        <field name="escalation_deadline" readonly="1"/>
                        <field name="escalation_to_id" readonly="1"/>
                        <field name="escalation_count" readonly="1"/>
                    </group>
                    <group string="Actual Work Dates">
                        <field name="actual_start_date"/>
                        <field name="actual_end_date"/>
                    </group>
                    <group string="SLA Information" colspan="2">
                        <field name="sla_id"/>
                        <field name="sla_response_deadline" readonly="1"/>
                        <field name="sla_resolution_deadline" readonly="1"/>
                        <field name="sla_response_status" widget="badge"/>
                        <field name="sla_resolution_status" widget="badge"/>
                    </group>
                    <notebook>
                        <page string="Description">
                            <field name="description"/>
                        </page>
                        <page string="Sections &amp; Tasks">
                            <field name="section_ids" create="false" delete="false">
                                <tree>
                                    <field name="sequence"/>
                                    <field name="name"/>
                                </tree>
                                <form>
                                    <group>
                                        <field name="name" readonly="1"/>
                                        <field name="sequence" readonly="1"/>
                                    </group>
                                    <field name="task_ids">
                                        <tree editable="bottom">
                                            <field name="sequence" readonly="1"/>
                                            <field name="name" readonly="1"/>
                                            <field name="description" readonly="1"/>
                                            <field name="is_checklist_item" readonly="1"/>
                                            <field name="is_done" widget="boolean_toggle"/>
                                            <field name="before_image" widget="image"/>
                                            <field name="after_image" widget="image"/>
                                            <field name="notes"/>
                                        </tree>
                                    </field>
                                </form>
                            </field>
                        </page>
                        <page string="Work Done">
                            <field name="work_done"/>
                        </page>
                        <page string="Technician Assignments">
                            <field name="assignment_ids">
                                <tree editable="bottom">
                                    <field name="technician_id"/>
                                    <field name="start_date"/>
                                    <field name="end_date"/>
                                </tree>
                            </field>
                        </page>
                        <page string="Parts Used">
                            <field name="parts_used_ids">
                                <tree editable="bottom">
                                    <field name="product_id"/>
                                    <field name="quantity"/>
                                    <field name="uom_id"/>
                                    <field name="product_qty_in_hand"/>
                                    <field name="notes"/>
                                </tree>
                            </field>
                        </page>
                        <!-- PERMITS TAB -->
                        <page string="Permits">
                            <field name="permit_ids">
                                <tree editable="bottom">
                                    <field name="name"/>
                                    <field name="permit_type"/>
                                    <field name="status"/>
                                    <field name="issued_date"/>
                                    <field name="expiry_date"/>
                                </tree>
                            </field>
                        </page>
                        <!-- END PERMITS TAB -->
                    </notebook>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
                <field name="workorder_task_ids" invisible="1"/>
            </form>
        </field>
    </record>

    <!-- Workorder Tree View -->
    <record id="view_maintenance_workorder_tree" model="ir.ui.view">
        <field name="name">maintenance.workorder.tree</field>
        <field name="model">maintenance.workorder</field>
        <field name="arch" type="xml">
            <tree decoration-success="status=='done'"
                  decoration-danger="status=='cancelled'"
                  decoration-info="status=='in_progress'">
                <field name="status" invisible="1"/>
                <field name="name"/>
                <field name="asset_id"/>
                <field name="facility_id"/>
                <field name="room_id"/>
                <field name="building_id"/>
                <field name="floor_id"/>
                <field name="priority"/>
                <field name="service_type"/>
                <field name="maintenance_team_id"/>
                <field name="technician_id"/>
                <field name="supervisor_id"/>
                <field name="manager_id"/>
                <field name="sla_id"/>
                <field name="sla_response_status" widget="badge"/>
                <field name="sla_resolution_status" widget="badge"/>
                <button name="action_start_progress" string="Start Work" type="object" icon="fa-play"/>
                <button name="action_assign_technician" string="Assign Tech" type="object" icon="fa-user-plus"/>
                <button name="action_report_downtime" string="Report Downtime" type="object" icon="fa-clock-o"/>
            </tree>
        </field>
    </record>
</odoo>

--- File: views/asset_category_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="view_asset_category_tree" model="ir.ui.view">
        <field name="name">asset.category.tree</field>
        <field name="model">facilities.asset.category</field>
        <field name="arch" type="xml">
            <tree>
                <field name="name"/>
                <field name="active"/>
            </tree>
        </field>
    </record>

    <record id="view_asset_category_form" model="ir.ui.view">
        <field name="name">asset.category.form</field>
        <field name="model">facilities.asset.category</field>
        <field name="arch" type="xml">
            <form string="Asset Category">
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <record id="action_asset_category" model="ir.actions.act_window">
        <field name="name">Asset Categories</field>
        <field name="res_model">facilities.asset.category</field>
        <field name="view_mode">tree,form</field>
    </record>
</odoo>


--- File: views/maintenance_team_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Maintenance Team List View -->
    <record id="view_maintenance_team_tree" model="ir.ui.view">
        <field name="name">maintenance.team.tree</field>
        <field name="model">maintenance.team</field>
        <field name="arch" type="xml">
            <tree string="Teams">
                <field name="name"/>
                <field name="service_type"/>
                <field name="leader_id"/>
            </tree>
        </field>
    </record>

    <!-- Maintenance Team Form View -->
    <record id="view_maintenance_team_form" model="ir.ui.view">
        <field name="name">maintenance.team.form</field>
        <field name="model">maintenance.team</field>
        <field name="arch" type="xml">
            <form string="Team">
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="service_type"/>
                        <field name="leader_id"/>
                        <field name="member_ids"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Action for Teams -->
    <record id="action_maintenance_team" model="ir.actions.act_window">
        <field name="name">Teams</field>
        <field name="res_model">maintenance.team</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create and manage maintenance teams and departments.
            </p>
        </field>
    </record>
</odoo>

--- File: views/maintenance_job_plan_views.xml ---
<odoo>
    <!-- Maintenance Job Plan Form View -->
    <record id="maintenance_job_plan_view_form" model="ir.ui.view">
        <field name="name">maintenance.job.plan.form</field>
        <field name="model">maintenance.job.plan</field>
        <field name="arch" type="xml">
            <form string="Maintenance Job Plan">
                <header>
                    <button name="toggle_active" type="object" string="Archive"
                            confirm="Are you sure you want to archive this Job Plan?"/>
                    <button name="toggle_active" type="object" string="Unarchive"
                            confirm="Are you sure you want to unarchive this Job Plan?"/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box"/>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="e.g., FCU Monthly Maintenance"/></h1>
                        <field name="code" readonly="1"/>
                    </div>
                    <group>
                        <group>
                            <field name="asset_category_ids" widget="many2many_tags"
                                   options="{'no_create_edit': True}"/>
                        </group>
                        <group>
                            <field name="company_id" groups="base.group_multi_company"/>
                            <field name="active" widget="boolean_toggle"/>
                        </group>
                    </group>
                    <notebook>
                        <page string="Sections &amp; Tasks" name="sections_tasks">
                            <field name="section_ids">
                                <tree>
                                    <field name="sequence" widget="handle"/>
                                    <field name="name"/>
                                </tree>
                                <form>
                                    <group>
                                        <field name="name"/>
                                        <field name="sequence"/>
                                    </group>
                                    <field name="task_ids">
                                        <tree editable="bottom">
                                            <field name="sequence" widget="handle"/>
                                            <field name="name"/>
                                            <field name="description"/>
                                            <field name="is_checklist_item"/>
                                        </tree>
                                        <form>
                                            <group>
                                                <field name="name"/>
                                                <field name="description"/>
                                                <field name="sequence"/>
                                                <field name="is_checklist_item"/>
                                            </group>
                                        </form>
                                    </field>
                                </form>
                            </field>
                        </page>
                        <page string="Guidelines" name="guidelines">
                            <field name="description" widget="html"/>
                        </page>
                        <page string="Other Information" name="other_info">
                            <group>
                            </group>
                        </page>
                    </notebook>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" groups="base.group_user"/>
                    <field name="activity_ids"/>
                    <field name="message_ids"/>
                </div>
            </form>
        </field>
    </record>
</odoo>

--- File: views/stock_picking_inherit_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <record id="view_picking_form_inherit_maintenance" model="ir.ui.view">
            <field name="name">stock.picking.form.inherit.maintenance</field>
            <field name="model">stock.picking</field>
            <field name="inherit_id" ref="stock.view_picking_form"/>
            <field name="arch" type="xml">
                <xpath expr="//field[@name='origin']" position="after">
                    <field name="workorder_id"/>
                </xpath>
            </field>
        </record>
    </data>
</odoo>

--- File: views/maintenance_workorder_kanban.xml ---
<odoo>
    <record id="view_maintenance_workorder_kanban" model="ir.ui.view">
        <field name="name">maintenance.workorder.kanban</field>
        <field name="model">maintenance.workorder</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <field name="status"/>
                <field name="technician_id"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_card">
                            <strong><field name="name"/></strong>
                            <div>Status: <field name="status"/></div>
                            <div>Technician: <field name="technician_id"/></div>
                            <div>
                                <button type="object" name="action_start_progress"
                                        class="btn btn-primary btn-sm">
                                    Start Work
                                </button>
                                <button type="object" name="action_assign_technician"
                                        class="btn btn-info btn-sm">
                                    Assign Tech
                                </button>
                                <button type="object" name="action_report_downtime"
                                        class="btn btn-warning btn-sm">
                                    Report Downtime
                                </button>
                            </div>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>
</odoo>

--- File: views/workorder_type_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Tree View for Work Order Types -->
    <record id="view_workorder_type_tree" model="ir.ui.view">
        <field name="name">workorder.type.tree</field>
        <field name="model">workorder.type</field>
        <field name="arch" type="xml">
            <tree string="Work Order Types">
                <field name="name"/>
                <field name="description"/>
            </tree>
        </field>
    </record>

    <!-- Form View for Work Order Types -->
    <record id="view_workorder_type_form" model="ir.ui.view">
        <field name="name">workorder.type.form</field>
        <field name="model">workorder.type</field>
        <field name="arch" type="xml">
            <form string="Work Order Type">
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Action for Work Order Types -->
    <record id="action_workorder_type" model="ir.actions.act_window">
        <field name="name">Work Order Types</field>
        <field name="res_model">workorder.type</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Define and manage categories for your maintenance work orders.
            </p>
        </field>
    </record>

    <!-- Menu Item for Work Order Types (under Maintenance -> Configuration) -->
    <menuitem id="menu_maintenance_workorder_type_config"
              name="Work Order Types"
              parent="maintenance.menu_maintenance_configuration"
              action="action_workorder_type"
              sequence="20"/>

</odoo>


--- File: views/product_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- This creates new fields without trying to modify non-existent ones -->
    <record id="view_product_product_extension" model="ir.ui.view">
        <field name="name">product.product.form.extension</field>
        <field name="model">product.product</field>
        <field name="inherit_id" ref="product.product_normal_form_view"/>
        <field name="priority">99</field>
        <field name="arch" type="xml">
            <!-- Just add something simple to ensure the inheritance works -->
            <field name="default_code" position="after">
                <field name="service_tracking" invisible="1"/>
                <field name="service_policy" invisible="1"/>
            </field>
        </field>
    </record>
</odoo>

--- File: views/facility_asset_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- Asset Tree View -->
    <record id="view_facilities_asset_tree" model="ir.ui.view">
        <field name="name">facilities.asset.tree</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <tree decoration-muted="not active">
                <field name="name"/>
                <field name="asset_code"/>
                <field name="barcode"/>
                <field name="facility_id"/>
                <field name="category_id"/>
                <field name="room_id"/>
                <field name="building_id"/>
                <field name="floor_id"/>
                <field name="condition"/>
                <field name="state"/>
                <field name="responsible_id"/>
                <field name="active"/>
            </tree>
        </field>
    </record>

    <!-- Asset Form View -->
    <record id="view_facility_asset_form" model="ir.ui.view">
        <field name="name">facilities.asset.form</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <form string="Asset">
                <header>
                    <field name="state" widget="statusbar"
                           statusbar_visible="draft,active,maintenance,disposed"
                           statusbar_colors='{"draft":"gray","active":"blue","maintenance":"orange","disposed":"red"}'/>
                    <button name="action_activate" string="Activate" type="object"
                            invisible="state != 'draft'" class="oe_highlight"/>
                    <button name="action_set_maintenance" string="Set to Maintenance" type="object"
                            invisible="state != 'active'" class="oe_highlight"/>
                    <button name="action_set_active" string="Set Active" type="object"
                            invisible="state != 'maintenance'" class="oe_highlight"/>
                    <button name="action_dispose" string="Dispose" type="object"
                            invisible="state == 'disposed'" class="oe_highlight"/>
                </header>
                <sheet>
                    <div class="oe_button_box" name="button_box">
                        <button name="action_open_dashboard" type="object" icon="fa-tachometer" string="Dashboard"
                                help="Open asset dashboard"/>
                    </div>
                    <div class="oe_right">
                        <field name="image_1920" widget="image" class="oe_avatar" options="{'preview_image': 'image_1920'}"/>
                        <field name="barcode_image" widget="image" class="oe_avatar" options="{'preview_image': 'barcode_image', 'size': [128,128]}"/>
                    </div>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Asset Name"/></h1>
                        <label for="asset_code" class="oe_edit_only"/>
                        <h2><field name="asset_code" placeholder="Asset Code"/></h2>
                        <label for="barcode" class="oe_edit_only"/>
                        <div>
                            <field name="barcode" widget="barcode"/>
                        </div>
                    </div>
                    <group>
                        <group string="Identification">
                            <field name="asset_tag"/>
                            <field name="serial_number"/>
                            <field name="category_id"/>
                        </group>
                        <group string="Location &amp; Responsibility">
                            <field name="facility_id"/>
                            <field name="room_id"/>
                            <field name="building_id" readonly="1"/>
                            <field name="floor_id" readonly="1"/>
                            <field name="responsible_id"/>
                            <field name="department_id"/>
                        </group>
                    </group>
                    <notebook>
                        <page string="Acquisition &amp; Lifecycle" name="acquisition_lifecycle">
                            <group>
                                <group>
                                    <field name="purchase_date"/>
                                    <field name="installation_date"/>
                                    <field name="purchase_value" widget="monetary" options="{'currency_field': 'currency_id'}"/>
                                    <field name="currency_id" invisible="1"/>
                                </group>
                                <group>
                                    <field name="expected_lifespan"/>
                                    <field name="warranty_expiration_date"/>
                                    <field name="warranty_status"/>
                                </group>
                            </group>
                        </page>
                        <page string="Manufacturer &amp; Service" name="manufacturer_service">
                            <group>
                                <group>
                                    <field name="manufacturer_id"/>
                                    <field name="model_number"/>
                                </group>
                                <group>
                                    <field name="service_provider_id"/>
                                </group>
                            </group>
                        </page>
                        <page string="Depreciation Records" name="depreciation_records">
                            <field name="depreciation_ids">
                                <tree>
                                    <field name="asset_id"/>
                                    <field name="depreciation_date"/>
                                    <field name="value_before"/>
                                    <field name="depreciation_amount"/>
                                    <field name="value_after"/>
                                </tree>
                            </field>
                        </page>
                        <page string="Notes &amp; Documents" name="notes_documents">
                            <field name="notes"/>
                            <separator string="Documents"/>
                            <field name="attachment_ids" widget="many2many_binary"/>
                        </page>
                    </notebook>
                    <field name="active" groups="base.group_no_one"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <!-- Asset Form Inherit for create attribute -->
    <record id="view_facility_asset_form_inherit" model="ir.ui.view">
        <field name="name">facilities.asset.form.inherit</field>
        <field name="model">facilities.asset</field>
        <field name="inherit_id" ref="facilities_management.view_facility_asset_form"/>
        <field name="arch" type="xml">
            <xpath expr="//form" position="attributes">
                <attribute name="create">true</attribute>
            </xpath>
        </field>
    </record>

    <!-- Asset Search View -->
    <record id="view_facilities_asset_search" model="ir.ui.view">
        <field name="name">facilities.asset.search</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <search string="Assets">
                <field name="name"/>
                <field name="asset_code"/>
                <field name="barcode"/>
                <field name="serial_number"/>
                <field name="asset_tag"/>
                <field name="category_id"/>
                <field name="facility_id"/>
                <field name="room_id"/>
                <field name="building_id"/>
                <field name="floor_id"/>
                <field name="responsible_id"/>
                <field name="manufacturer_id"/>
                <field name="model_number"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Category" name="groupby_category" context="{'group_by':'category_id'}"/>
                    <filter string="Project" name="groupby_project" context="{'group_by':'facility_id'}"/>
                    <filter string="Room" name="groupby_room" context="{'group_by':'room_id'}"/>
                    <filter string="Building" name="groupby_building" context="{'group_by':'building_id'}"/>
                    <filter string="Floor" name="groupby_floor" context="{'group_by':'floor_id'}"/>
                    <filter string="Condition" name="groupby_condition" context="{'group_by':'condition'}"/>
                    <filter string="Responsible Person" name="groupby_responsible" context="{'group_by':'responsible_id'}"/>
                    <filter string="Manufacturer" name="groupby_manufacturer" context="{'group_by':'manufacturer_id'}"/>
                    <filter string="Department" name="groupby_department" context="{'group_by':'department_id'}"/>
                    <filter string="Warranty Status" name="groupby_warranty_status" context="{'group_by':'warranty_status'}"/>
                </group>
            </search>
        </field>
    </record>

    <!-- Asset List Action -->
    <record id="action_facilities_asset" model="ir.actions.act_window">
        <field name="name">Facility Assets</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">tree,form,calendar</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create your first facility asset!
            </p>
            <p>
                Manage your facility assets including equipment, furniture, and infrastructure.
                Use calendar view to track important dates like warranty expiration.
            </p>
        </field>
    </record>

    <!-- Asset Dashboard Action -->
    <record id="action_asset_dashboard" model="ir.actions.act_window">
        <field name="name">Asset Dashboard</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">graph,pivot,calendar</field>
        <field name="domain">[]</field>
        <field name="context">{}</field>
        <field name="target">current</field>
        <field name="binding_model_id" eval="False"/>
    </record>
</odoo>

--- File: views/asset_calendar_views.xml ---
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Asset Search View for Calendar -->
    <record id="view_facilities_asset_search_calendar" model="ir.ui.view">
        <field name="name">facilities.asset.search.calendar</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="asset_tag"/>
                <field name="asset_code"/>
                <field name="category_id"/>
                <field name="facility_id"/>
                <field name="condition"/>

                <!-- Filters -->
                <filter name="active_assets" string="Active Assets"
                        domain="[('active', '=', True)]"/>

                <filter name="has_warranty" string="Has Warranty"
                        domain="[('warranty_expiration_date', '!=', False)]"/>

                <filter name="purchased_assets" string="Has Purchase Date"
                        domain="[('purchase_date', '!=', False)]"/>

                <separator/>

                <!-- Group By -->
                <group expand="0" string="Group By">
                    <filter name="group_category" string="Category"
                            context="{'group_by': 'category_id'}"/>
                    <filter name="group_condition" string="Condition"
                            context="{'group_by': 'condition'}"/>
                    <filter name="group_facility" string="Facility"
                            context="{'group_by': 'facility_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <!-- Asset Calendar View - Warranty Dates -->
    <record id="view_facilities_asset_calendar_warranty" model="ir.ui.view">
        <field name="name">facilities.asset.calendar.warranty</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <calendar string="Asset Warranty Calendar"
                      date_start="warranty_expiration_date"
                      color="condition">
                <field name="name"/>
                <field name="asset_tag"/>
                <field name="category_id"/>
                <field name="condition"/>
                <field name="facility_id"/>
            </calendar>
        </field>
    </record>

    <!-- Asset Calendar View - Purchase Dates -->
    <record id="view_facilities_asset_calendar_purchase" model="ir.ui.view">
        <field name="name">facilities.asset.calendar.purchase</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <calendar string="Asset Purchase Calendar"
                      date_start="purchase_date"
                      color="category_id">
                <field name="name"/>
                <field name="asset_tag"/>
                <field name="asset_code"/>
                <field name="category_id"/>
                <field name="purchase_value"/>
                <field name="condition"/>
            </calendar>
        </field>
    </record>

    <!-- Asset Calendar View - Installation Dates -->
    <record id="view_facilities_asset_calendar_installation" model="ir.ui.view">
        <field name="name">facilities.asset.calendar.installation</field>
        <field name="model">facilities.asset</field>
        <field name="arch" type="xml">
            <calendar string="Asset Installation Calendar"
                      date_start="installation_date"
                      color="category_id">
                <field name="name"/>
                <field name="asset_tag"/>
                <field name="category_id"/>
                <field name="facility_id"/>
                <field name="responsible_id"/>
                <field name="condition"/>
            </calendar>
        </field>
    </record>

    <!-- Actions -->
    <record id="action_asset_warranty_calendar" model="ir.actions.act_window">
        <field name="name">Asset Warranty Calendar</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="view_id" ref="view_facilities_asset_calendar_warranty"/>
        <field name="search_view_id" ref="view_facilities_asset_search_calendar"/>
        <field name="domain">[('warranty_expiration_date', '!=', False)]</field>
        <field name="context">{'search_default_has_warranty': 1}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No assets with warranty dates found!
            </p>
            <p>
                Add warranty expiration dates to your assets to see them in this calendar.
            </p>
        </field>
    </record>

    <record id="action_asset_purchase_timeline" model="ir.actions.act_window">
    <field name="name">Purchase Timeline</field>
    <field name="res_model">facilities.asset</field>
    <field name="view_mode">calendar,tree,form</field>
    <field name="view_id" ref="view_facilities_asset_calendar_purchase"/>
    <field name="search_view_id" ref="view_facilities_asset_search_calendar"/>
    <field name="domain">[('purchase_date', '!=', False)]</field>
    <field name="context">{'search_default_purchased_assets': 1}</field>
    <field name="help" type="html">
        <p class="o_view_nocontent_smiling_face">
            No assets with purchase dates found!
        </p>
        <p>
            Add purchase dates to your assets to see them in this calendar.
        </p>
    </field>
</record>

    <record id="action_asset_purchase_calendar" model="ir.actions.act_window">
        <field name="name">Asset Purchase Calendar</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="view_id" ref="view_facilities_asset_calendar_purchase"/>
        <field name="search_view_id" ref="view_facilities_asset_search_calendar"/>
        <field name="domain">[('purchase_date', '!=', False)]</field>
        <field name="context">{'search_default_purchased_assets': 1}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No assets with purchase dates found!
            </p>
            <p>
                Add purchase dates to your assets to see them in this calendar.
            </p>
        </field>
    </record>

    <record id="action_asset_installation_calendar" model="ir.actions.act_window">
        <field name="name">Asset Installation Calendar</field>
        <field name="res_model">facilities.asset</field>
        <field name="view_mode">calendar,tree,form</field>
        <field name="view_id" ref="view_facilities_asset_calendar_installation"/>
        <field name="search_view_id" ref="view_facilities_asset_search_calendar"/>
        <field name="domain">[('installation_date', '!=', False)]</field>
        <field name="context">{'search_default_active_assets': 1}</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                No assets with installation dates found!
            </p>
            <p>
                Add installation dates to your assets to see them in this calendar.
            </p>
        </field>
    </record>
</odoo>

--- File: views/room_views.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="view_facilities_room_tree" model="ir.ui.view">
        <field name="name">facilities.room.tree</field>
        <field name="model">facilities.room</field>
        <field name="arch" type="xml">
            <tree decoration-muted="not active">
                <field name="name"/>
                <field name="code"/>
                <field name="room_type"/>
                <field name="floor_id"/>
                <field name="building_id"/>
                <field name="facility_id"/>
                <field name="manager_id"/>
                <field name="active" invisible="1"/>
            </tree>
        </field>
    </record>

    <record id="view_facilities_room_form" model="ir.ui.view">
        <field name="name">facilities.room.form</field>
        <field name="model">facilities.room</field>
        <field name="arch" type="xml">
            <form string="Room">
                <sheet>
                    <div class="oe_title">
                        <label for="name" class="oe_edit_only"/>
                        <h1><field name="name" placeholder="Room Name/Number" required="True"/></h1>
                        <label for="code" class="oe_edit_only"/>
                        <h2><field name="code" placeholder="Room Code" required="True" readonly="1"/></h2>
                    </div>

                    <group>
                        <group string="Room Details">
                            <field name="floor_id" required="True"/>
                            <field name="building_id" readonly="1"/>
                            <field name="facility_id" readonly="1"/>
                            <field name="manager_id"/>
                            <field name="room_type"/>
                            <field name="capacity"/>
                            <field name="area_sqm"/>
                        </group>
                        <group string="Usage &amp; Notes">
                            <field name="usage"/>
                            <field name="notes"/>
                        </group>
                    </group>
                    <field name="active" groups="base.group_no_one"/>
                </sheet>
                <div class="oe_chatter">
                    <field name="message_follower_ids" widget="mail_followers"/>
                    <field name="activity_ids" widget="mail_activity"/>
                    <field name="message_ids" widget="mail_thread"/>
                </div>
            </form>
        </field>
    </record>

    <record id="view_facilities_room_search" model="ir.ui.view">
        <field name="name">facilities.room.search</field>
        <field name="model">facilities.room</field>
        <field name="arch" type="xml">
            <search string="Rooms">
                <field name="name"/>
                <field name="code"/>
                <field name="room_type"/>
                <field name="floor_id"/>
                <field name="building_id"/>
                <field name="facility_id"/>
                <field name="manager_id"/>
                <filter string="Active" name="active" domain="[('active', '=', True)]"/>
                <filter string="Archived" name="inactive" domain="[('active', '=', False)]"/>
                <group expand="0" string="Group By">
                    <filter string="Floor" name="groupby_floor" context="{'group_by':'floor_id'}"/>
                    <filter string="Building" name="groupby_building" context="{'group_by':'building_id'}"/>
                    <filter string="Facility" name="groupby_facility" context="{'group_by':'facility_id'}"/>
                    <filter string="Room Type" name="groupby_room_type" context="{'group_by':'room_type'}"/>
                    <filter string="Manager" name="groupby_manager" context="{'group_by':'manager_id'}"/>
                </group>
            </search>
        </field>
    </record>

    <record id="action_facilities_room" model="ir.actions.act_window">
        <field name="name">Rooms</field>
        <field name="res_model">facilities.room</field>
        <field name="view_mode">tree,form</field>
        <field name="help" type="html">
            <p class="o_view_nocontent_smiling_face">
                Create a new Room
            </p>
        </field>
    </record>

</odoo>

